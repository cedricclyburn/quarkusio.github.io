<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Mon, 22 Apr 2024 08:25:53 +0000</lastBuildDate>
        
        <item>
            <title>Ship.Cars leverages Quarkus to reach its goals</title>
            <link>
                https://quarkus.io/blog/ship-cars-leverages-quarkus-to-reach-its-goals/
            </link>
            <description>
                &lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/sc_logo.png&quot; alt=&quot;Ship.Cars logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ship.cars/&quot;&gt;Ship.Cars&lt;/a&gt; is a revolutionary partner in auto transport logistics, offering customizable software solutions specially tailored to accommodate all your car hauling requirements.
Our tools are impeccably designed to amplify your business&amp;#8217;s ability to streamline, automate, and organize the entire car hauling process, from start to finish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Through the development of various products, Ship.Cars has helped the automotive logistics industry to transition into the modern age.
Our industry solutions, such as LoadMate and LoadMate Pro, cater to the various needs of dealerships, rental car companies, and other shippers.
Meanwhile, innovations like our SmartHaul TMS and SmartHaul APP have become indispensable tools for our car haulers to book and manage their loads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contending-with-challenges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contending-with-challenges&quot;&gt;&lt;/a&gt;Contending with challenges&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a product-centric organization, we utilize the microservice paradigm to deliver a diverse array of functionality via numerous distinct software products.
Thus far, we&amp;#8217;ve developed over &lt;strong&gt;50&lt;/strong&gt; microservices.
Each of these not only meets the requisite functional requirements but also adheres to rigorous technical specifications.
These specifications ensure seamless provisioning of services, consistent performance under load, and easy identification and resolution of any arising issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The construction of these services, over a large period of time, has relied on various frameworks, including &lt;em&gt;Quarkus&lt;/em&gt; , &lt;em&gt;Spring Boot&lt;/em&gt; and &lt;em&gt;Django&lt;/em&gt;.
Each framework exhibits its unique strengths and weaknesses extending from nuanced characteristics.
However, with time, we&amp;#8217;ve determined that Quarkus optimally fulfills a large portion of our requirements.
This explains our current shift from Django to Quarkus for a significant portion of our development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Ship.Cars deploys its microservices on Kubernetes within the Google Cloud platform, we continually seek efficient ways to scale our developmental prowess, while simultaneously saving cloud resource consumption.
With cloud resource consumption costs always being a priority, we strive to find effective ways to optimize memory and processor use in the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Common challenges often arise when deploying microservices in the cloud, including:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower cloud resource consumption&lt;/strong&gt;: Multiple active microservices can consume a significant amount of memory and CPU, escalating costs rapidly.
Hence, effective management of cloud resources is crucial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster boot-up times&lt;/strong&gt;: In a microservices architecture, it&amp;#8217;s important for services to stop, start, and scale swiftly.
Slow boot-up times can have a severe impact on system performance and responsiveness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streamlined microservices development&lt;/strong&gt;: Building and ensuring interoperability within microservices can be complex, requiring deft management and specialized tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilience and fault tolerance&lt;/strong&gt;: Microservices must be resilient and capable of quick recovery from unexpected failures.
Implementing such fault tolerance mechanisms, however, can be challenging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service discovery&lt;/strong&gt;: The ability to discover and communicate between services becomes critical as their number increases.
Traditional hard-coded endpoints do not scale well in these scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Event-driven microservices&lt;/strong&gt;: Implementing an event-driven architectural model in microservices enables distinct services to communicate asynchronously.
Yet, orchestrating this can be difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reactive and imperative programming&lt;/strong&gt;: The selection of an appropriate programming model for the cloud, especially one that supports scalability and system responsiveness, can be daunting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus could beautifully address these challenges as follows:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower cloud resource consumption&lt;/strong&gt;: Known for their high memory usage, traditional Java applications can get expensive in a cloud environment where resources cost money.
Quarkus significantly reduces the memory footprint of applications, leading to more efficient cloud resource management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster boot-up times&lt;/strong&gt;: Slow startup times are quite common with traditional Java applications, an issue that presents a particular problem in the cloud where applications need to scale up and down quickly.
Quarkus drastically improves start-up performances, with applications often starting in sub-second times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streamlined microservices development&lt;/strong&gt;: Quarkus has been designed to work with popular Java standards and technologies such as &lt;code&gt;Eclipse MicroProfile&lt;/code&gt;, &lt;code&gt;Jakarta EE&lt;/code&gt;, &lt;code&gt;OpenTelemetry&lt;/code&gt;, &lt;code&gt;Hibernate&lt;/code&gt;, etc., simplifying the development process and reducing the time and complexity involved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilience and fault tolerance&lt;/strong&gt;: Quarkus employs the &lt;code&gt;MicroProfile Fault Tolerance&lt;/code&gt; specification to provide features like timeout, retry, bulkhead, circuit breaker, and fallback.
These features render your microservices more resilient and fault-tolerant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service discovery&lt;/strong&gt;: Quarkus supports Kubernetes service discovery natively, allowing services to discover and communicate with each other in a reliable manner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Event-driven microservices&lt;/strong&gt;: Quarkus supports event-driven architecture, enabling services to communicate through events, thereby reducing the complexity and coupling between the services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reactive and imperative programming&lt;/strong&gt;: Quarkus gives developers the freedom to use reactive or imperative programming models or even combine both in the same application, creating a perfect solution for scalability and system responsiveness.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tackling-cloud-resource-consumption&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tackling-cloud-resource-consumption&quot;&gt;&lt;/a&gt;Tackling cloud resource consumption&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For businesses like ours, one of our organizational goals is to reduce costs while not sacrificing platformâ€™s performance to ensure premium user experience.
However, traditional &lt;strong&gt;JVM-based&lt;/strong&gt; services often present challenges like substantial memory footprints, extended startup times, and high CPU usage.
These problems not only impact technical aspects but also have financial implications, significantly affecting the overall cost of running and maintaining software solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native images are standalone executables that include both the application code and the necessary runtime components.
With the advent of GraalVM, a high-performance, polyglot virtual machine able to run applications written in different programming languages, the concept of native images has gained popularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Native images offer several advantages, such as:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster startup time&lt;/strong&gt;: As pre-compiled entities, native images can start incredibly quickly, often in milliseconds.
This aspect is hugely beneficial when applications need to start and stop almost instantly, like in serverless functions or cloud-based microservices architectures.
For instance, one of our microservices, &lt;code&gt;native powered by Quarkus 3.2.7.Final&lt;/code&gt;, starts in just 0.677s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower memory footprint&lt;/strong&gt;: Applications&apos; memory footprints can be significantly reduced with native images as they only include the runtime components actually used by the applications.
This efficiency is important in cloud environments where resource usage directly affects costs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Real service memory usage&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/memory.png&quot; alt=&quot;Memory usage&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Memory usage of a Quarkus native image&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easier distribution: As standalone executables, native images can be easily distributed and run on any environment without requiring the installation of a separate runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced container size: Being fully self-contained, the container images for native images are more efficient to distribute due to their reduced size.
This leads to faster start-up times in containerized environments like Kubernetes.
For example, the size comparison between &lt;code&gt;Quarkus Native (85.1 MB)&lt;/code&gt;, &lt;code&gt;Quarkus Non-Native (648.4 MB)&lt;/code&gt; and &lt;code&gt;Spring Boot (861.9 MB)&lt;/code&gt; provides a clear picture of the difference in resource efficiency between them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Quarkus, you can compile your application into a native image by leveraging the GraalVM native-image compiler, allowing your Java applications to experience these advantages in cloud platforms, containerization, and serverless architectures due to their swift startup times and lower resource consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-developer-productivity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-developer-productivity&quot;&gt;&lt;/a&gt;Optimizing developer productivity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus brings several benefits which enhance developer productivity, such as:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Live Coding&lt;/strong&gt;: With no build time and deploy time, developers can test changes to the code instantaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero configuration with Dev Services&lt;/strong&gt;: Quarkus can automatically configure some services for development and testing purposes, enhancing efficiency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuous testing&lt;/strong&gt;: Continuous testing is implemented via the command line and the Dev UI, enhancing the quality of the end product without depending on third-party tools and processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dev UI&lt;/strong&gt;: Developers can configure extensions, monitor the application, and test components with great ease.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unified config&lt;/strong&gt;: All of the application&amp;#8217;s configurations are consolidated in one place, improving accessibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standards-based&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;embracing-quarkus-extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#embracing-quarkus-extensions&quot;&gt;&lt;/a&gt;Embracing Quarkus extensions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus Extensions are pre-configured feature sets designed to simplify several common tasks during application development.
They offer an efficient way to imbibe new capabilities or direct integrations in your project with minimum effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our organization, we managed to implement our internal extensions swiftly, effectively addressing maintenance issues and configuration incompatibilities we encountered earlier while trying to create native images.
Today, we benefit from an extension hub that quells all previous concerns and enhances our productivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus extensions are powerful tools offering deep integration, optimization, and enhanced developer experience, it&amp;#8217;s essential to weigh the trade-offs and consider if simpler solutions like standard JAR libraries might suit the need better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;looking-ahead&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#looking-ahead&quot;&gt;&lt;/a&gt;Looking ahead&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the graphical representation below, I want to illustrate the inherent relationship between the process of adopting Quarkus and the subsequent outcomes over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/difficulty_cost_line.png&quot; alt=&quot;Difficulty Cost Line&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Comparison of Difficulty/Cost and Ease of Ease-of-Use/Returns Over Time in Adopting Quarkus Features&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the &lt;em&gt;&quot;Y-Axis&quot;&lt;/em&gt;, we define difficulty or cost in terms of story-points per sprint, reflecting the relative effort required for the features&apos; implementation.
This also represents costs in terms of time and resources spent in the adoption of Quarkus features. Simultaneously, ease-of-use/returns take into account metrics such as decreased debugging time,
faster feature development, and improvements in team productivity post successful implementation.
The graph clearly demonstrates that at the outset (tagged as &lt;em&gt;&quot;Begin&quot;&lt;/em&gt; on the &lt;em&gt;&quot;X-Axis&quot;&lt;/em&gt;), both the difficulty (illustrated in higher story points) and costs are at their peak, signifying a challenging initial phase.
However, as we move along the timeline from &lt;em&gt;&quot;Begin&quot;&lt;/em&gt; through &lt;em&gt;&quot;Middle&quot;&lt;/em&gt; and onto &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, we see a notable drop in story-points per sprint, indicating a reduced difficulty level and cost.
In parallel to this, the ease-of-use and returns charted start at a comparatively low point at the beginning.
These escalate gradually as we advance along the timeline towards &lt;em&gt;&quot;Middle&quot;&lt;/em&gt; and &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, showing a tangible increase in productivity and other gains from adopting and integrating Quarkus features into our practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the time we reach &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, we see a substantial decrease in difficulty and cost, while the ease-of-use and returns have considerably increased.
This dual progression effectively highlights the significant benefits of investing in the adoption of Quarkus, despite the initial challenges.
Investing in Quarkus is a strategic maneuver towards creating efficient, scalable, and modern applications aptly suited for the cloud era.
With its robust capabilities and supportive community, Quarkus is well-positioned to pioneer the future of cloud-native application development.
The decision to adopt Quarkus is a significant leap towards optimizing for efficiency, scalability, and cutting-edge application performance that will provide us with a considerable competitive edge in the rapidly evolving tech landscape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/ship-cars-leverages-quarkus-to-reach-its-goals/
            </guid>
            
            
            
            <author>Ivelin Yanev (https://twitter.com/iqnev)</author>
            
        </item>
        
        <item>
            <title>Revolutionizing time tracking: how Quarkus transformed our backend development</title>
            <link>
                https://quarkus.io/blog/quarkus-saas-backend-time-tracking-app-case-study/
            </link>
            <description>
                &lt;div class=&quot;imageblock customer-logo&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/gran-logo.png&quot; alt=&quot;GRAN logo&quot; width=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph customer-quote&quot;&gt;
&lt;p&gt;GRAN Software Solutions is a German company that designs and builds modern backend solutions.
We work with large automotive clients and others to restructure and create new solutions.
We also develop and offer SaaS tools to help us and others in our daily work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One such tool we built for ourselves and others is a time tracking application called &lt;a href=&quot;https://sheetty.com&quot;&gt;Sheetty&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-time-tracking-challenge&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-time-tracking-challenge&quot;&gt;&lt;/a&gt;The time tracking challenge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/frustrated-developer.png&quot; alt=&quot;Frustrated Developer&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We needed to create a time tracking application because the existing solutions on the market did not meet our specific requirements.
They were either not designed for developers, lacked the simplicity we needed, or were loaded with unnecessary features.
We wanted to build a tool that was perfectly tailored to our needs, using the extensive experience we had gained from working on client projects over the years.
We also wanted to create a more modern and user-friendly design, which would be fun to use and incorporate newer technologies such as Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main issue we faced with existing time tracking solutions was the lack of an easy way to switch between clients.
We also found that they did not support quick actions or shortcuts, which we were used to, and there was no visual way to see the time entries we made during the day.
Additionally, we wanted to track time within the context of contracts signed with our clients in terms of daily rates and contract caps.
That&amp;#8217;s why we decided to create a custom solution to address all of these specific needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;discovering-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#discovering-quarkus&quot;&gt;&lt;/a&gt;Discovering Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we were choosing the technology stack to use for our backend, our main goal was to use technologies that we were already familiar with, such as the Kotlin programming language, Spring Boot framework, and Postgres database.
We also wanted to select an ecosystem that could provide us with libraries for database connectivity, web client, caching, and other similar features.
Additionally, we wanted to use a high-performance solution to keep our hosting costs low and avoid high memory requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After analyzing various solutions on the market, we decided to use the Quarkus framework as it met all of our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-backend-development-experience-with-quarkus-the-key-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-backend-development-experience-with-quarkus-the-key-features&quot;&gt;&lt;/a&gt;Our backend development experience with Quarkus: the key features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have designed our application architecture to separate the frontend and backend parts.
To secure our backend APIs in a modern and secure way, we opted to use JSON web tokens, and Quarkus has excellent support for them.
We also use role-based security for our APIs, and Quarkus makes it easy for us to implement this.
We have different roles in our application, such as regular users and admins, and this information is encoded in our JSON web tokens.
Quarkus ensures that these tokens are not tampered with or manipulated when they reach our back-end systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;@RolesAllowed&lt;/code&gt; for authorization of our API endpoints&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;@Path(&quot;/clients&quot;)
@RolesAllowed(&quot;User&quot;)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
class ClientResource(
    private val getClientsHandler: GetClientsHandler,
    private val newClientHandler: NewClientHandler,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We relied heavily on rich JSON support to model our data flexibly and delegate much of the functionality to Postgres itself to manipulate the data.
This way, we could pass the already-built JSON objects back to the API client, which significantly reduced the time it took to make design decisions in the application code.
Quarkus provided fantastic support for JSON object APIs.
We believe that Postgres is the right place to perform data manipulations and aggregations, not the application code, due to performance and code maintenance reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using &lt;code&gt;JsonObject&lt;/code&gt; to pass our data in and out&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;@GET
@Produces(MediaType.APPLICATION_JSON)
suspend fun getProfile() = db.preparedQuery(
    &quot;&quot;&quot;select profile from &quot;user&quot; where email = $1&quot;&quot;&quot;.trimIndent()
).execute().awaitSuspending().first().getJsonObject(&quot;profile&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although Quarkus primarily targets Java programming language, Kotlin support is also quite good.
We used coroutines and suspending functions, which allowed for greater performance and much simpler code compared to some other asynchronous programming models that are available.
Kotlin&amp;#8217;s structured concurrency enabled us to write seemingly sequential code but in reality, very performant asynchronous code.
Quarkus provides excellent Kotlin extension methods built on top of existing asynchronous APIs such as Mutiny.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We executed the database migration on application startup, which was very important for us.
Fortunately, Quarkus has excellent Flyway support, so all our database migrations were in one place and executed during our backend booting process.
This kept our database schema and data transparent and reproducible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/db-migrations.png&quot; alt=&quot;Database Migrations&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Using Flyway to execute database migrations&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our deployments, we use Kubernetes.
Before using Quarkus, we described our application requirements using helm packaging, but with Quarkus, we opted for another approach as Quarkus offers a great Kubernetes extension.
Instead of writing any code, we described our Kubernetes resources using an &lt;code&gt;application.yaml&lt;/code&gt; file, keeping our complete application configuration in one place.
This extension generated Kubernetes resource files behind the scenes, which we then applied to our Kubernetes cluster.
This works well for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/k8s-config.png&quot; alt=&quot;Kubernetes configuration&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Using the Kubernetes extension to generate Kubernetes resources&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For packaging our backend API, we used the Jib extension.
To package our application in a container, all we had to do was use the &lt;code&gt;application.yaml&lt;/code&gt; file and set all the required parameters such as image name tags repository, and so on.
We didn&amp;#8217;t have to maintain the Docker file on our own, which was very convenient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our time tracking application needs to send emails to our users and admins on various occasions.
To keep things simpler, we decided not to go for any third-party API-driven email-sending approach.
Instead, we send emails ourselves, and for that purpose, we use Qute email templates, which make composing and sending emails to our users very simple.
This extension provides support for coding coroutines, allowing for non-blocking sending and higher throughput.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/qute-templates.png&quot; alt=&quot;Qute Templates&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Using Qute email templates to send emails&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;development-journey&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#development-journey&quot;&gt;&lt;/a&gt;Development journey&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus development process has been excellent so far.
Compared to other frameworks like Spring Boot, Quarkus has a faster startup time and a smaller memory footprint.
It also provides profiles, which allows us to have slightly different configurations or behaviors between environments.
We can easily substitute some hard-to-run third-party services with local mocks, leaving the application code unchanged.
Quarkus is also great in terms of configuration and how easily we can overwrite values stored in the &lt;code&gt;application.yaml&lt;/code&gt; file with external environment variables.
Although the hot reload mode didn&amp;#8217;t work well with Kotlin, I believe all the bugs related to it will be solved in upcoming releases.
During development, we had to restart our running service most of the time for code changes to take effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our backend API functionalities took approximately a month and a half to complete.
Considering that only two developers worked on the backend, I think it was a good result.
In this phase of our product lifecycle, we decided against writing automated tests due to constantly revisiting requirements and our needs.
Instead, we went for manual testing for now.
Once our time tracking application gets more active users, we plan to start writing automated tests using Quarkus test support, including Testcontainers and others.
Developing a full-blown API, including API security with JSON web tokens and authorization in place, having database migration automatically applied during application boot time, having a flexible and maintainable code base revolving around JSON, with the ability to package and deploy our API to our Kubernetes cluster, is quite an achievement for just a month and a half of work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are glad to share that using Quarkus, Kotlin, and Postgres as the foundation of our backend API has been a fun and productive experience for us.
Quarkus&amp;#8217;s ability to experiment quickly and leverage ready-made components has made us confident that we made the right technological choice.
Although there are some imperfections with hot reload and some quirks with Kotlin, we are waiting for the fixes to be made and have no doubt that Quarkus is the best solution for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are working smart and hard to bring new features to our time tracking application.
To achieve this, we will continue to use the great features provided by Quarkus, which dramatically reduce the time needed to roll out our features quickly.
We invite you to try our time tracker at &lt;a href=&quot;https://sheetty.com&quot;&gt;sheetty.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-saas-backend-time-tracking-app-case-study/
            </guid>
            
            
            
            <author>Dusan Odalovic (https://twitter.com/OdalovicDusan)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9.4 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.9.4, our third (we skipped 3.9.0) maintenance release for the 3.9 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.4&quot;&gt;the full changelog of 3.9.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.8.4 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-8-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.8.4, our third (we skipped 3.8.0) maintenance release for our 3.8 LTS release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.8, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.8.4&quot;&gt;the full changelog of 3.8.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-8-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.2.12.Final released - Maintenance LTS release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-2-12-final-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.2.12.Final, the eleventh maintenance release of the 3.2 LTS release train has been released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes the following security-related fixes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-2700&quot;&gt;CVE-2024-2700&lt;/a&gt; io.quarkus/quarkus-core: Leak of local configuration properties into Quarkus applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-29025&quot;&gt;CVE-2024-29025&lt;/a&gt; io.netty/netty-codec-http: Allocation of Resources Without Limits or Throttling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/b_c/jose4j/issues/212&quot;&gt;CVE-2023-51775&lt;/a&gt; org.bitbucket.b_c/jose4j: Dos Attack Via specifically crafted JWE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the following component upgrades:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apache Mime4J 0.8.9 &amp;#8594; 0.8.11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jose4J 0.9.3 &amp;#8594; 0.9.6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netty 4.1.100.Final &amp;#8594; 4.1.108.Final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netty tcnative 2.0.61.Final &amp;#8594; 2.0.65.Final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vert.x 4.4.8 &amp;#8594; 4.4.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;com.dajudge.kindcontainer:kindcontainer 1.3.0 &amp;#8594; 1.4.5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using a 3.2 release, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;known-issues-include&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-issues-include&quot;&gt;&lt;/a&gt;Known issues include:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using a 3.2.11.Final release. However, the fix for CVE-2024-2700 introduces a change in how configuration options are recoded at build time and should be taken into account.
More specifically, properties from configuration sources that are considered local (those that are available at build time but not runtime, such as environment variables, system properties, Maven and Gradle project properties) will not override the default values of runtime configuration properties. This is done to avoid leaking local environment values into production builds.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.2.12.Final&quot;&gt;the full changelog of 3.2.12.Final on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-2-12-final-released/
            </guid>
            
            
            
            <author>Alexey Loubyansky (https://twitter.com/aloubyansky)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #43 - April</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-43/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out these great articles in the April newsletter. &quot;The Power of LLMs in Java: Leveraging Quarkus and LangChain4j&quot; by Nicolas Duminil attempts to demystify the use of LLMs in Java, with Quarkus and LangChain4j, across a ludic and hopefully original project. Learn about some challenges running several simultaneous Quarkus app containers on your machine with the Quarkusâ€™ remote development mode activated presents in &quot;Multiplying The Developer Joy: Multiple Quarkus Containers + Simultaneous Remote Development Sessions&quot; by Rustam Mehmandarov. See how to configure Quarkus OIDC with Google Cloud credentials in &quot;OIDC with Google &amp;amp; Quarkus&quot; by Prabodh Agarwal. &quot;An Open Plea to the Quarkus Team&quot; by Preslav Rachev asks us to rethink the way the Java community sees Quarkus the framework. &quot;Getting started with MongoDB and Quarkus: Beyond the basics&quot; by Hans-Peter Grahsl is Part 2 of is article on how to Connect your Quarkus application to a fully-managed MongoDB database instance. Learn how to lower the level of a logger in Quarkus to better understand when something goes wrong and how to fix it with Gwenneg Lepage&amp;#8217;s &quot;Changing the Quarkus loggers level from Unleash&quot; article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/43/&quot;&gt;Newsletter #43: April&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-43/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9.3 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-3-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.9.3, our second (we skipped 3.9.0) maintenance release for the 3.9 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.3&quot;&gt;the full changelog of 3.9.3 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-3-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9.2 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-2-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.9.2, our first (we skipped 3.9.0) maintenance release for the 3.9 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.2&quot;&gt;the full changelog of 3.9.2 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-2-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Changing the Quarkus loggers level from Unleash</title>
            <link>
                https://quarkus.io/blog/changing-loggers-level-from-unleash/
            </link>
            <description>
                &lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m part of a Red Hat team that is responsible for a dozen of Quarkus apps which run in Red Hat OpenShift, with multiple pods each.
While these apps all have different purposes, they also share a common fate: something will go wrong eventually.
When it does, we&amp;#8217;ll need to understand and fix the problem as fast as possible.
Lowering the level of a logger is often helpful, but our apps are containerized and updating an environment variable to change the logger level isn&amp;#8217;t always as easy at it sounds.
We also don&amp;#8217;t want to expose REST endpoints in most of our apps, so extensions such as &lt;a href=&quot;https://github.com/quarkiverse/quarkus-logging-manager&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-logging-manager&lt;/a&gt; are not an option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our apps have another thing in common: they depend on &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-unleash/dev/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-unleash&lt;/a&gt; because we&amp;#8217;re fetching our feature toggles from &lt;a href=&quot;https://www.getunleash.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unleash&lt;/a&gt;.
When I read &lt;a href=&quot;https://medium.com/safe-engineering/how-unleash-enhanced-our-troubleshooting-experience-by-100x-e0c82b6df825&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zero downtime log level changes using Unleash&lt;/a&gt; from Aman Jain, it made me want to try the same thing with Quarkus.
I&amp;#8217;ll show you below how I successfully did that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post contains incremental code snippets.
Each one of them is an enhanced version of the previous one and addresses a specific technical challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;changing-a-logger-level-programmatically&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#changing-a-logger-level-programmatically&quot;&gt;&lt;/a&gt;Changing a logger level programmatically&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start with the obvious requirement: how to change the level of a logger programmatically with Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in the &lt;a href=&quot;https://quarkus.io/guides/logging&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Logging configuration guide&lt;/a&gt;, Quarkus supports multiple logging APIs.
I only tested the following code with the JBoss Logging API as well as the &lt;code&gt;io.quarkus.logging.Log&lt;/code&gt; API.
I can&amp;#8217;t guarantee that everything will work out of the box with other logging APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JBoss Logging API doesn&amp;#8217;t offer a way to change the level of a logger programmatically, so we need the help of the &lt;code&gt;java.util.logging&lt;/code&gt; API to do it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import java.util.logging.Level; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import java.util.logging.Logger; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

public class LogLevelManager {

    public void setLoggerLevel(String loggerName, String levelName) {
        Logger logger = Logger.getLogger(loggerName); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        Level level = Level.parse(levelName); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        logger.setLevel(level);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make sure you&amp;#8217;re importing classes from the &lt;code&gt;java.util.logging&lt;/code&gt; package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Any category as described in the &lt;a href=&quot;https://quarkus.io/guides/logging#logging-categories&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Logging configuration guide&lt;/a&gt; will work as the logger name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Level#parse&lt;/code&gt; will throw exceptions if the level name is not valid. Please handle them carefully.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-a-logger-level-from-unleash&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#setting-a-logger-level-from-unleash&quot;&gt;&lt;/a&gt;Setting a logger level from Unleash&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, we&amp;#8217;re able to set a logger level programmatically.
Now, how do we feed the &lt;code&gt;LogLevelManager#setLoggerLevel&lt;/code&gt; method with data from Unleash?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;unleash-variants-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unleash-variants-to-the-rescue&quot;&gt;&lt;/a&gt;Unleash variants to the rescue&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Unleash, the feature toggles can be associated with &lt;a href=&quot;https://docs.getunleash.io/reference/feature-toggle-variants&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;variants&lt;/a&gt; which are meant to facilitate A/B testing and experimentation.
Each variant is defined with a set of properties, including the optional &lt;code&gt;payload&lt;/code&gt; that can be used to pass JSON data from Unleash to our Quarkus app.
That&amp;#8217;s how we&amp;#8217;ll set the level of our Quarkus app loggers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/changing-loggers-level-from-unleash/payload.png&quot; alt=&quot;Unleash variant payload&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;retrieving-the-variant-payload&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#retrieving-the-variant-payload&quot;&gt;&lt;/a&gt;Retrieving the variant payload&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s see how we&amp;#8217;ll retrieve from the Quarkus app the variant payload defined in Unleash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/changing-loggers-level-from-unleash/connecting.png&quot; alt=&quot;Connecting Quarkus to Unleash&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, the Quarkus app needs to depend on the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-unleash/dev/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-unleash&lt;/a&gt; extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll also use a very simple data structure to deserialize the payload with Jackson:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class LogConfig {
    public String category;
    public String level;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, here&amp;#8217;s an update of the &lt;code&gt;LogLevelManager&lt;/code&gt; class to make it get the variant from Unleash, deserialize the payload and change the level of a series of loggers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.getunleash.Unleash;
import io.getunleash.Variant;
import io.getunleash.variant.Payload;
import io.quarkus.logging.Log;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

@ApplicationScoped &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
public class LogLevelManager {

    private static final String UNLEASH_TOGGLE_NAME = &quot;my-app.log-levels&quot;;

    @Inject
    Unleash unleash; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

    @Inject
    ObjectMapper objectMapper;

    public void updateLoggersLevel() {
        for (LogConfig logConfig : getLogConfigs()) {
            try {
                setLoggerLevel(logConfig.category, logConfig.level);
            } catch (Exception e) {
                Log.error(&quot;Could not the set level of a logger&quot;, e);
            }
        }
    }

    private LogConfig[] getLogConfigs() {
        Variant variant = unleash.getVariant(UNLEASH_TOGGLE_NAME); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        if (variant.isEnabled()) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            Optional&amp;lt;Payload&amp;gt; payload = variant.getPayload();
            if (payload.isPresent() &amp;amp;&amp;amp; payload.get().getType().equals(&quot;json&quot;) &amp;amp;&amp;amp; payload.get().getValue() != null) {
                try {
                    return objectMapper.readValue(payload.get().getValue(), LogConfig[].class);
                } catch (JsonProcessingException e) {
                    Log.error(&quot;Variant payload deserialization failed&quot;, e);
                }
            }
        }
        return new LogConfig[0]; &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    }

    private void setLoggerLevel(String loggerName, String levelName) {
        Logger logger = Logger.getLogger(loggerName);
        Level currentLevel = logger.getLevel();
        Level newLevel = Level.parse(levelName);
        if (!newLevel.equals(currentLevel)) {
            logger.setLevel(newLevel);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;From now on, &lt;code&gt;LogLevelManager&lt;/code&gt; is an &lt;code&gt;@ApplicationScoped&lt;/code&gt; bean.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Unleash&lt;/code&gt; is an &lt;code&gt;@ApplicationScoped&lt;/code&gt; bean produced by the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-unleash/dev/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-unleash&lt;/a&gt; extension.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Be careful about the argument passed to &lt;code&gt;Unleash#getVariant&lt;/code&gt;: it has to be the toggle name, not the variant name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;variant.isEnabled()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; if the toggle is disabled in Unleash or if the toggle has no variants.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the method is unable to find a variant payload or if it fails to deserialize that payload for any reasons, an empty &lt;code&gt;LogConfig&lt;/code&gt; array will be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now retrieve the loggers configuration from Unleash, that&amp;#8217;s great!
But that new &lt;code&gt;LogLevelManager#updateLoggerslevel&lt;/code&gt; method isn&amp;#8217;t used yet.
Where should it be used from, and when?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/changing-loggers-level-from-unleash/triggering.png&quot; alt=&quot;Triggering the loggers level update&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need that method to be executed as soon as the loggers configuration is changed in Unleash.
So, its execution has to be periodically scheduled somehow.
We could make the method &lt;code&gt;@Scheduled&lt;/code&gt; with the &lt;a href=&quot;https://quarkus.io/guides/scheduler-reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-scheduler&lt;/a&gt; extension, but there is a better approach thanks to the Unleash SDK.
Let&amp;#8217;s jump to the next section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-subscriber-api-from-unleash&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-subscriber-api-from-unleash&quot;&gt;&lt;/a&gt;The Subscriber API from Unleash&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Unleash Client SDK for Java comes with a feature that will be very helpful here: the &lt;a href=&quot;https://docs.getunleash.io/reference/sdks/java#subscriber-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Subscriber API&lt;/a&gt;.
The &lt;a href=&quot;https://github.com/Unleash/unleash-client-java/blob/main/src/main/java/io/getunleash/event/UnleashSubscriber.java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UnleashSubscriber&lt;/a&gt; interface can indeed be implemented to subscribe to various Unleash events, including &lt;code&gt;FeatureToggleResponse&lt;/code&gt; which is emitted when the Unleash client fetches toggles from the server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the Subscriber API with the &lt;a href=&quot;https://docs.quarkiverse.io/quarkus-unleash/dev/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quarkus-unleash&lt;/a&gt; extension is extremely simple.
&lt;code&gt;UnleashSubscriber&lt;/code&gt; needs to be implemented in a CDI bean and that&amp;#8217;s it!
The extension will pass the bean to the Unleash client builder automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.getunleash.Unleash;
import io.getunleash.Variant;
import io.getunleash.event.UnleashSubscriber;
import io.getunleash.repository.FeatureToggleResponse;
import io.getunleash.variant.Payload;
import io.quarkus.logging.Log;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

import static io.getunleash.repository.FeatureToggleResponse.Status.CHANGED;

@ApplicationScoped
public class LogLevelManager implements UnleashSubscriber { &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    private static final String UNLEASH_TOGGLE_NAME = &quot;my-app.log-levels&quot;;

    @Inject
    Unleash unleash;

    @Inject
    ObjectMapper objectMapper;

    @Override
    public void togglesFetched(FeatureToggleResponse toggleResponse) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        if (toggleResponse.getStatus() == CHANGED) { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            updateLoggersLevel();
        }
    }

    // Unchanged, except for the access modifier.
    private void updateLoggersLevel() {
        for (LogConfig logConfig : getLogConfigs()) {
            try {
                setLoggerLevel(logConfig.category, logConfig.level);
            } catch (Exception e) {
                Log.error(&quot;Could not the set level of a logger&quot;, e);
            }
        }
    }

    // Unchanged.
    private LogConfig[] getLogConfigs() {
        Variant variant = unleash.getVariant(UNLEASH_TOGGLE_NAME);
        if (variant.isEnabled()) {
            Optional&amp;lt;Payload&amp;gt; payload = variant.getPayload();
            if (payload.isPresent() &amp;amp;&amp;amp; payload.get().getType().equals(&quot;json&quot;) &amp;amp;&amp;amp; payload.get().getValue() != null) {
                try {
                    return objectMapper.readValue(payload.get().getValue(), LogConfig[].class);
                } catch (JsonProcessingException e) {
                    Log.error(&quot;Variant payload deserialization failed&quot;, e);
                }
            }
        }
        return new LogConfig[0];
    }

    // Unchanged.
    private void setLoggerLevel(String loggerName, String levelName) {
        Logger logger = Logger.getLogger(loggerName);
        Level currentLevel = logger.getLevel();
        Level newLevel = Level.parse(levelName);
        if (!newLevel.equals(currentLevel)) {
            logger.setLevel(newLevel);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;re still using the same &lt;code&gt;LogLevelManager&lt;/code&gt; class, but now it&amp;#8217;s implementing &lt;code&gt;UnleashSubscriber&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This method is invoked every time the Unleash client fetches toggles from the server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;We&amp;#8217;ll update the loggers level only if the toggles changed server-side.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, the &lt;code&gt;LogLevelManager#updateLoggerslevel&lt;/code&gt; method is now automatically invoked whenever the client fetches new data from the server.
But what about scheduling that periodically?
Well, the Unleash client already relies on an internal scheduled executor to fetch the toggles.
Therefore, we don&amp;#8217;t need to bother scheduling anything in our app.
It will work automagically!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/changing-loggers-level-from-unleash/automagically.png&quot; alt=&quot;LogLevelManager with UnleashSubscriber&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;one-variant-to-rule-them-all&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#one-variant-to-rule-them-all&quot;&gt;&lt;/a&gt;One variant to rule them all&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the beginning of this post, I mentioned that my team is responsible for a dozen of Quarkus apps.
Each app runs with a varying number of replicas.
Let&amp;#8217;s simplify and consider all of them as hosts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have dozens of hosts and yet only one Unleash variant to manage the loggers level for all of them.
Here&amp;#8217;s how I implemented that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, the data structure of the variant payload needs a small addition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;public class LogConfig {
    public String hostName; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    public String category;
    public String level;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;That&amp;#8217;s new!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we can introduce a host filtering capability in &lt;code&gt;LogLevelManager&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.getunleash.Unleash;
import io.getunleash.Variant;
import io.getunleash.event.UnleashSubscriber;
import io.getunleash.repository.FeatureToggleResponse;
import io.getunleash.variant.Payload;
import io.quarkus.logging.Log;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

import static io.getunleash.repository.FeatureToggleResponse.Status.CHANGED;

@ApplicationScoped
public class LogLevelManager implements UnleashSubscriber {

    private static final String UNLEASH_TOGGLE_NAME = &quot;my-app.log-levels&quot;;

    @ConfigProperty(name = &quot;host-name&quot;, defaultValue = &quot;localhost&quot;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    String hostName;

    @Inject
    Unleash unleash;

    @Inject
    ObjectMapper objectMapper;

    // Unchanged.
    @Override
    public void togglesFetched(FeatureToggleResponse toggleResponse) {
        if (toggleResponse.getStatus() == CHANGED) {
            updateLoggersLevel();
        }
    }

    private void updateLoggersLevel() {
        for (LogConfig logConfig : getLogConfigs()) {
            try {
                if (shouldThisHostBeUpdated(logConfig)) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                    setLoggerLevel(logConfig.category, logConfig.level);
                }
            } catch (Exception e) {
                Log.error(&quot;Could not the set level of a logger&quot;, e);
            }
        }
    }

    // Unchanged.
    private LogConfig[] getLogConfigs() {
        Variant variant = unleash.getVariant(UNLEASH_TOGGLE_NAME);
        if (variant.isEnabled()) {
            Optional&amp;lt;Payload&amp;gt; payload = variant.getPayload();
            if (payload.isPresent() &amp;amp;&amp;amp; payload.get().getType().equals(&quot;json&quot;) &amp;amp;&amp;amp; payload.get().getValue() != null) {
                try {
                    return objectMapper.readValue(payload.get().getValue(), LogConfig[].class);
                } catch (JsonProcessingException e) {
                    Log.error(&quot;Variant payload deserialization failed&quot;, e);
                }
            }
        }
        return new LogConfig[0];
    }

    private boolean shouldThisHostBeUpdated(LogConfig logConfig) {
        if (logConfig.hostName == null) {
            return true;
        }
        if (logConfig.hostName.endsWith(&quot;*&quot;)) { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
            return hostName.startsWith(logConfig.hostName.substring(0, logConfig.hostName.length() - 1));
        } else {
            return hostName.equals(logConfig.hostName);
        }
    }

    // Unchanged.
    private void setLoggerLevel(String loggerName, String levelName) {
        Logger logger = Logger.getLogger(loggerName);
        Level currentLevel = logger.getLevel();
        Level newLevel = Level.parse(levelName);
        if (!newLevel.equals(currentLevel)) {
            logger.setLevel(newLevel);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;In OpenShift, we&amp;#8217;re passing the generated pod name through the &lt;code&gt;HOST_NAME&lt;/code&gt; environment variable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;That&amp;#8217;s new!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;This block is used to filter hosts based on a host name prefix. That&amp;#8217;s enough for our use case, but a regular expression could be used for finer filtering.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how the variant payload may look like after these changes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-json hljs&quot; data-lang=&quot;json&quot;&gt;[
  {
    &quot;hostName&quot;: &quot;unstable-service-7dbbcb4cc-9d9hl&quot;,
    &quot;category&quot;: &quot;io.quarkus.arc&quot;,
    &quot;level&quot;: &quot;FINE&quot;
  },
  {
    &quot;hostName&quot;: &quot;awesome-app*&quot;,
    &quot;category&quot;: &quot;org.acme.SomeService&quot;,
    &quot;level&quot;: &quot;WARNING&quot;
  },
  {
    &quot;category&quot;: &quot;org.apache.kafka.clients&quot;,
    &quot;level&quot;: &quot;FINER&quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that payload:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the first entry will affect a specific host: &lt;code&gt;unstable-service-7dbbcb4cc-9d9hl&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the second entry will affect all hosts whose name starts with &lt;code&gt;awesome-app&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the third entry will affect all hosts regardless of their names&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reverting-changes-automatically&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#reverting-changes-automatically&quot;&gt;&lt;/a&gt;Reverting changes automatically&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Changing the level of loggers through an Unleash variant should be a temporary action, mostly for troubleshooting purposes.
This means we need to revert the level of the loggers eventually when the troubleshooting is over.
Doing so by hand would be painful, so let&amp;#8217;s see how we can automate that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.getunleash.Unleash;
import io.getunleash.Variant;
import io.getunleash.event.UnleashSubscriber;
import io.getunleash.repository.FeatureToggleResponse;
import io.getunleash.variant.Payload;
import io.quarkus.logging.Log;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.util.Arrays;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import static io.getunleash.repository.FeatureToggleResponse.Status.CHANGED;
import static java.util.stream.Collectors.toSet;

@ApplicationScoped
public class LogLevelManager implements UnleashSubscriber {

    private static final String UNLEASH_TOGGLE_NAME = &quot;my-app.log-levels&quot;;

    @ConfigProperty(name = &quot;host-name&quot;, defaultValue = &quot;localhost&quot;)
    String hostName;

    @Inject
    Unleash unleash;

    @Inject
    ObjectMapper objectMapper;

    private final Map&amp;lt;String, Level&amp;gt; originalLoggerLevels = new ConcurrentHashMap&amp;lt;&amp;gt;();

    // Unchanged.
    @Override
    public void togglesFetched(FeatureToggleResponse toggleResponse) {
        if (toggleResponse.getStatus() == CHANGED) {
            updateLoggersLevel();
        }
    }

    public void updateLoggersLevel() {
        LogConfig[] logConfigs = getLogConfigs();
        for (LogConfig logConfig : logConfigs) {
            try {
                if (shouldThisHostBeUpdated(logConfig)) {
                    setLoggerLevel(logConfig.category, logConfig.level);
                }
            } catch (Exception e) {
                Log.error(&quot;Could not the set level of a logger&quot;, e);
            }
        }
        revertLoggersLevel(logConfigs); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }

    // Unchanged.
    private LogConfig[] getLogConfigs() {
        Variant variant = unleash.getVariant(UNLEASH_TOGGLE_NAME);
        if (variant.isEnabled()) {
            Optional&amp;lt;Payload&amp;gt; payload = variant.getPayload();
            if (payload.isPresent() &amp;amp;&amp;amp; payload.get().getType().equals(&quot;json&quot;) &amp;amp;&amp;amp; payload.get().getValue() != null) {
                try {
                    return objectMapper.readValue(payload.get().getValue(), LogConfig[].class);
                } catch (JsonProcessingException e) {
                    Log.error(&quot;Variant payload deserialization failed&quot;, e);
                }
            }
        }
        return new LogConfig[0];
    }

    // Unchanged.
    private boolean shouldThisHostBeUpdated(LogConfig logConfig) {
        if (logConfig.hostName == null) {
            return true;
        }
        if (logConfig.hostName.endsWith(&quot;*&quot;)) {
            return hostName.startsWith(logConfig.hostName.substring(0, logConfig.hostName.length() - 1));
        } else {
            return hostName.equals(logConfig.hostName);
        }
    }

    private void setLoggerLevel(String loggerName, String levelName) {
        Logger logger = Logger.getLogger(loggerName);
        Level currentLevel = logger.getLevel();
        Level newLevel = Level.parse(levelName);
        if (!newLevel.equals(currentLevel)) {
            originalLoggerLevels.putIfAbsent(loggerName, currentLevel); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            logger.setLevel(newLevel);
        }
    }

    private void revertLoggersLevel(LogConfig[] logConfigs) {
        if (logConfigs.length == 0) {
            originalLoggerLevels.forEach(this::revertLoggerLevel);
            originalLoggerLevels.clear();
        } else {
            Set&amp;lt;String&amp;gt; knownLoggers = Arrays.stream(logConfigs)
                    .filter(this::shouldThisHostBeUpdated)
                    .map(logConfig -&amp;gt; logConfig.category)
                    .collect(toSet());
            originalLoggerLevels.entrySet().removeIf(entry -&amp;gt; {
                boolean remove = !knownLoggers.contains(entry.getKey());
                if (remove) {
                    revertLoggerLevel(entry.getKey(), entry.getValue()); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                }
                return remove;
            });
        }
    }

    private void revertLoggerLevel(String loggerName, Level originalLevel) {
        Logger logger = Logger.getLogger(loggerName);
        logger.setLevel(originalLevel); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;That&amp;#8217;s new!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The original logger level is now stored in memory and will be used when the changes are eventually reverted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the level of a logger was previously modified from Unleash and that logger is no longer part of the latest Unleash variant payload, its level will be reverted to the original value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If the original level is &lt;code&gt;null&lt;/code&gt;, then the logger will inherit the level from its parent logger.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;LogLevelManager&lt;/code&gt; class is still far from perfect, but it finally meets the requirements of this blog post:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it changes the level of Quarkus loggers automatically and immediately, based on a variant payload from Unleash&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it automatically reverts all changes to the previous loggers configuration when needed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading this post! I hope it will help you troubleshoot your applications faster.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;special-thanks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#special-thanks&quot;&gt;&lt;/a&gt;Special thanks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to Mikel Alejo Barcina for helping me fix a bug in the code above!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/changing-loggers-level-from-unleash/
            </guid>
            
            
            
            <author>Gwenneg Lepage</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9 - Big Reactive Rename</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-1-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is with great pleasure that we are announcing the release of Quarkus 3.9.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This development cycle for this release was a bit longer than usual
as it contains all the new features since we branched Quarkus 3.7.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.9 is for developers who want the latest features,
if you are looking for an extended support cycle, you are encouraged to stay on 3.8 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the main changes for 3.9:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39159&quot;&gt;#39159&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39301&quot;&gt;#39301&lt;/a&gt; - Big Reactive Rename&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39142&quot;&gt;#39142&lt;/a&gt; - Initial version of the new declarative WebSocket server API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/34493&quot;&gt;#34493&lt;/a&gt; - Add CLI command for Config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39389&quot;&gt;#39389&lt;/a&gt; - Update to Infinispan 15&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/37680&quot;&gt;#37680&lt;/a&gt; - Welcome page now dynamic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38541&quot;&gt;#38541&lt;/a&gt; - Support OIDC Client JWT Bearer authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38603&quot;&gt;#38603&lt;/a&gt; - Introduce &lt;code&gt;@ClientBasicAuth`&lt;/code&gt; annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38608&quot;&gt;#38608&lt;/a&gt; - Allow TLS certificate reloading for the HTTP server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39206&quot;&gt;#39206&lt;/a&gt; - Improve graceful shutdown&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;Quarkus 3.9 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the-big-reactive-rename&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-big-reactive-rename&quot;&gt;&lt;/a&gt;The Big Reactive Rename&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Max Andersen already presented this initiative in &lt;a href=&quot;https://quarkus.io/blog/the-big-rename/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea behind this substantive change is to clarify which extensions are reactive only and which extensions are actually handling both blocking and reactive workloads equally well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why we renamed several extensions, and why RESTEasy Reactive is now branded as Quarkus REST and SmallRye Reactive Messaging as Messaging.
Note that this change also concerns the related extension so there are quite a lot of changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We didn&amp;#8217;t do it lightly:
the old names were generating a lot of confusion for our users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The good news is that, in most cases, it should be transparent for you as we put relocations in place, both for artifacts and configuration properties.
However we encourage you to move to the new names as soon as you can.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using &lt;code&gt;quarkus update&lt;/code&gt;, the update should be transparent for you.
If you are not using &lt;code&gt;quarkus update&lt;/code&gt;, we recommend to follow the dedicated section of &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have a known issue for this change:
if you are using &lt;code&gt;quarkus.resteasy-reactive.path&lt;/code&gt;/&lt;code&gt;quarkus.rest.path&lt;/code&gt;, you will get a warning saying the property is not recognized.
Don&amp;#8217;t panic, it is actually recognized, the warning is a mistake.
This problem will be solved in 3.9.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One common issue you might have when updating manually can come from the fact that we reused the &lt;code&gt;quarkus-rest-client&lt;/code&gt; name for the Quarkus REST implementation,
whereas in pre-3.7, it was used for the RESTEasy Classic implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bit of history might help:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Quarkus 3.7, we renamed &lt;code&gt;quarkus-rest-client&lt;/code&gt;, based on the RESTEasy Classic to &lt;code&gt;quarkus-resteasy-client&lt;/code&gt; to make it consistent with &lt;code&gt;quarkus-resteasy&lt;/code&gt; and pave the way for our future changes. We put a relocation in place so that it wouldn&amp;#8217;t break your applications. You can refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7#rest-client&quot;&gt;Quarkus 3.7 migration guide for more information&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Quarkus 3.9, we renamed &lt;code&gt;quarkus-rest-client-reactive&lt;/code&gt; to &lt;code&gt;quarkus-rest-client&lt;/code&gt; as part of our move to the Quarkus REST branding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So if your application can&amp;#8217;t start with an error saying there are duplicate implementations related to REST, just check that you are using consistently either the &lt;code&gt;quarkus-rest*&lt;/code&gt; extensions or the &lt;code&gt;quarkus-resteasy*&lt;/code&gt; extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;welcome-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#welcome-page&quot;&gt;&lt;/a&gt;Welcome page&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default welcome page you get when starting a Quarkus application in dev mode is now dynamic (and prettier!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;websocket-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#websocket-next&quot;&gt;&lt;/a&gt;WebSocket Next&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.9 comes with a next generation WebSocket extension, called &lt;code&gt;quarkus-websockets-next&lt;/code&gt; (the name is temporary as you can imagine).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are using WebSockets in your applications, we recommend that you give it a try as it is the future of WebSockets support in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about it in the &lt;a href=&quot;https://quarkus.io/guides/websockets-next-tutorial&quot;&gt;tutorial&lt;/a&gt; and the &lt;a href=&quot;https://quarkus.io/guides/websockets-next-reference&quot;&gt;reference guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;cli-command-for-config&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#cli-command-for-config&quot;&gt;&lt;/a&gt;CLI command for config&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commands were added to the Quarkus CLI to help managing configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quarkus config set&lt;/code&gt; allows to update configuration properties&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;quarkus config encrypt&lt;/code&gt; allows to encrypt values that you want to keep encrypted in your configuration files&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-enhancements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-enhancements&quot;&gt;&lt;/a&gt;Security enhancements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new version comes with several improvements related to security:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38541&quot;&gt;#38541&lt;/a&gt; - Support OIDC Client JWT Bearer authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38603&quot;&gt;#38603&lt;/a&gt; - Introduce &lt;code&gt;@ClientBasicAuth`&lt;/code&gt; annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/38608&quot;&gt;#38608&lt;/a&gt; - Allow TLS certificate reloading for the HTTP server (see the &lt;a href=&quot;https://quarkus.io/guides/http-reference#reloading-the-certificates&quot;&gt;documentation&lt;/a&gt; for more details)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;infinispan-15&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#infinispan-15&quot;&gt;&lt;/a&gt;Infinispan 15&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We updated to the latest and greatest Infinispan 15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might have to apply some changes to your applications,
so, if you are using the Infinispan extension, have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9#update-to-infinispan-15&quot;&gt;dedicated section of the migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;graceful-shutdown&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#graceful-shutdown&quot;&gt;&lt;/a&gt;Graceful shutdown&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some improvements were made to our graceful shutdown support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.0.CR1&quot;&gt;3.9.0.CR1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.0.CR2&quot;&gt;3.9.0.CR2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.0&quot;&gt;3.9.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.1&quot;&gt;3.9.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;925 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.9 release, thanks to Ales Justin, Alex Katlein, Alex Martel, Alexander Schwartz, Alexey Loubyansky, Andy Damevin, Anton-Vasilev, arvind-vignesh, Auri Munoz, avivmu, barreiro, Bas Passon, Benedikt Werner, Brahim Raddahi, Bruno Baptista, Bruno Leonardo, Chris Laprun, Christian Thiel, cknoblauch, Clement Escoffier, Daniel Bobbert, David M. Lloyd, Davide D&amp;#8217;Alto, Diego Ramp (u804103), Dimitris Kontokostas, dliubars, ennishol, Erin Schnabel, Falko Modler, fdlane, Foivos Zakkak, Francesco Nigro, Galder ZamarreÃ±o, Gasper Kojek, George Gastaldi, Georgios Andrianakis, glefloch, GonÃ§alo MontalvÃ£o Marques, Guillaume Smet, Hendrik Schmitz, Holly Cummins, humberto, Idryss Bourdier, Ioannis Canellos, Jakub Jedlicka, James Netherton, Jan Martiska, JiÅ™Ã­ Locker, Julien Ponge, Katia Aresti, Ladislav Thon, Leandro Quiroga, LoÃ¯c Mathieu, Luke Morfill, luneo7, Maciej Lisowski, Marcel StÃ¶r, Marco Bungart, Marco SappÃ© Griot, Marek Skacelik, mariofusco, marko-bekhta, martin, Martin Kouba, Matej Novotny, Matheus Cruz, Max Rydahl Andersen, Michael Edgar, Michal VavÅ™Ã­k, Michiel Thomassen, nimo23, ObserverOfTime, Oliver Wiebeck, Ozan Gunalp, Paulo Casaes, Peter Palaga, Phillip KrÃ¼ger, Pierre Adam, Robert Stupp, Roberto Cortez, Rolfe Dlugy-Hegwer, Romain BADINO, Rostislav Svoboda, Sanne Grinovero, Sebastian Schuster, Selim, Sergey Beryozkin, Severin Gehwolf, SpaceFox, Steve Hawkins, stianst, Stuart Douglas, StÃ©phane Ã‰pardaud, SÃ©bastien ALLEMAND, The-Huginn, Thomas Darimont, troosan, ub003, Vitaliy Baschlykoff, w0pp, Waldemar Reusch, Wesley Salimans, Wladimir Hofmann, xstefank, Yassin Hajaj, Yoann RodiÃ¨re, and Yoshikazu Nojima.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-1-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
    </channel>
</rss>
