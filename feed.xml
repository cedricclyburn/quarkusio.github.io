<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>Quarkus</title>
        <link>https://quarkus.io</link>
        <description>Quarkus: Supersonic Subatomic Java</description>
        <lastBuildDate>Wed, 01 May 2024 03:03:32 +0000</lastBuildDate>
        
        <item>
            <title>Quarkus 3.10 - Hibernate Search standalone POJO mapper, Flyway 10, security enhancements</title>
            <link>
                https://quarkus.io/blog/quarkus-3-10-0-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After some big changes in Quarkus 3.9, we have the pleasure to announce Quarkus 3.10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.10 is for developers who want the latest features,
if you are looking for an extended support cycle, you are encouraged to stay on 3.8 LTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the main changes for 3.10:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39415&quot;&gt;#39415&lt;/a&gt; - Extension for the Hibernate Search Standalone POJO Mapper with Elasticsearch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39509&quot;&gt;#39509&lt;/a&gt; - Update Flyway to 10.10.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39295&quot;&gt;#39295&lt;/a&gt; - Move package config to an interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/36504&quot;&gt;#36504&lt;/a&gt; - Allow authentication mechanism selection for a REST endpoint with annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/37816&quot;&gt;#37816&lt;/a&gt; - Optional support for the OIDC session cookie dir encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39793&quot;&gt;#39793&lt;/a&gt; - Support for verifying OIDC JWT claims with custom Jose4j &lt;code&gt;Validator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39812&quot;&gt;#39812&lt;/a&gt; - Support resolving of static OIDC tenants based on token issuers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/40056&quot;&gt;#40056&lt;/a&gt; - Add OIDC TokenCertificateValidator&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.10, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about the adjustments you need to make to your applications, please refer to the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.10&quot;&gt;Quarkus 3.10 migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.10&quot;&gt;3.10&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;whats-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#whats-new&quot;&gt;&lt;/a&gt;What&amp;#8217;s new?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hibernate-search-standalone-pojo-mapper&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hibernate-search-standalone-pojo-mapper&quot;&gt;&lt;/a&gt;Hibernate Search standalone POJO Mapper&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hibernate Search has been part of the Quarkus ecosystem for a long time but until now we only supported the Hibernate ORM integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.10 adds a brand new extension to add support for the Hibernate Search standalone POJO Mapper,
which allows to index directly arbitrary POJOs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to index structured data coming from files, MongoDB entities, &amp;#8230;&amp;#8203; this new extension should make you happy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interested in this extension? We have a &lt;a href=&quot;https://quarkus.io/guides/hibernate-search-standalone-elasticsearch&quot;&gt;dedicated guide&lt;/a&gt; for you,
which covers the Quarkus integration and the basics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more advanced information about the Hibernate Search standalone POJO mapper,
please consult the &lt;a href=&quot;https://docs.jboss.org/hibernate/stable/search/reference/en-US/html_single/#mapper-pojo-standalone&quot;&gt;Hibernate Search reference documentation&lt;/a&gt; and the &lt;a href=&quot;https://docs.jboss.org/hibernate/stable/search/getting-started/standalone/en-US/html_single/index.html#mapper-pojo-standalone-getting-started&quot;&gt;Getting started&lt;/a&gt; guide.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;flyway-10&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#flyway-10&quot;&gt;&lt;/a&gt;Flyway 10&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are a bit late to the party as we encountered some incompatibility with native executables and the new Flyway 10 but Quarkus 3.10 comes with an upgrade to Flyway 10, more precisely 10.10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not using &lt;code&gt;quarkus update&lt;/code&gt;,
have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.10&quot;&gt;migration guide&lt;/a&gt; as they split some more database supports out of Flyway core.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;changes-to-quarkus-package-config&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#changes-to-quarkus-package-config&quot;&gt;&lt;/a&gt;Changes to &lt;code&gt;quarkus.package.*&lt;/code&gt; config&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;quarkus.package.*&lt;/code&gt; config was refactored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The configuration changes are handled by &lt;code&gt;quarkus update&lt;/code&gt; but if you are upgrading manually, have a closer look at the dedicated section of the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.10#packaging-configuration-gear-white_check_mark&quot;&gt;migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that when using the previous configuration properties are deprecated but should still work
so you don&amp;#8217;t have to upgrade right away.
They will be dropped in a (relatively distant) future version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;security-enhancements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#security-enhancements&quot;&gt;&lt;/a&gt;Security enhancements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This new version comes with several improvements related to security:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/36504&quot;&gt;#36504&lt;/a&gt; - Allow authentication mechanism selection for a REST endpoint with annotation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/37816&quot;&gt;#37816&lt;/a&gt; - Optional support for the OIDC session cookie dir encryption&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39793&quot;&gt;#39793&lt;/a&gt; - Support for verifying OIDC JWT claims with custom Jose4j &lt;code&gt;Validator&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/39812&quot;&gt;#39812&lt;/a&gt; - Support resolving of static OIDC tenants based on token issuers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/40056&quot;&gt;#40056&lt;/a&gt; - Add OIDC TokenCertificateValidator&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get the full changelog of &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.10.0.CR1&quot;&gt;3.10.0.CR1&lt;/a&gt; and &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.10.0&quot;&gt;3.10.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contributors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contributors&quot;&gt;&lt;/a&gt;Contributors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus community is growing and has now &lt;a href=&quot;https://github.com/quarkusio/quarkus/graphs/contributors&quot;&gt;940 contributors&lt;/a&gt;.
Many many thanks to each and everyone of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In particular for the 3.10 release, thanks to Ales Justin, Alexander Schwartz, Alexey Loubyansky, Andy Damevin, Antonio Musarra, asjervanasten, avivmu, Bas Passon, Bruno Baptista, Clement Escoffier, Damiano Renfer, David M. Lloyd, ennishol, Eric Deandrea, Erin Schnabel, fdlane, Foivos Zakkak, Fouad Almalki, Francesco Nigro, Galder Zamarreño, George Gastaldi, Georgios Andrianakis, Guillaume Smet, Gwenneg Lepage, Holly Cummins, Ioannis Canellos, Jakub Jedlicka, James Netherton, Jan Martiska, Jason T. Greene, Jean Bisutti, Jerome Prinet, Jonas Jensen, Juan Jose Garcia, Julien Ponge, Jérémie Bresson, Katia Aresti, Klaus Nguetsa, Ladislav Thon, Laurent Broudoux, luneo7, Marc Nuri, Marco Sappé Griot, Marco Schaub, Marek Skacelik, marko-bekhta, Martin Kouba, Matej Novotny, Max Rydahl Andersen, Michal Maléř, Michal Vavřík, Michiel Thomassen, Monhemius,  B. (Bart), Ozan Gunalp, Peter Palaga, Phillip Krüger, Pierre Adam, Robbie Gemmell, Roberto Cortez, Sanne Grinovero, Sebastian Davids, Sergey Beryozkin, Stéphane Épardaud, Thomas Canava, Thomas Segismont, Vinicius A. Santos, xstefank, Yoann Rodière, Yoshikazu Nojima, Yukihiro Okada, and Žan Horvat.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-10-0-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9.5 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-5-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.9.5, our fourth (we skipped 3.9.0) maintenance release for the 3.9 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.5&quot;&gt;the full changelog of 3.9.5 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-5-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Indexing rollover with Quarkus and Hibernate Search</title>
            <link>
                https://quarkus.io/blog/search-indexing-rollover/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the first post in the series diving into the implementation details of the
&lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io&quot;&gt;application&lt;/a&gt; backing the guide search of
&lt;a href=&quot;https://quarkus.io/guides/&quot;&gt;quarkus.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Does your application need full-text search capabilities? Do you need to keep your application running
and producing search results without any downtime, even when reindexing all your data?
Look no further. In this post, we&amp;#8217;ll cover how you can approach this problem
and solve it in practice with a few low-level APIs, provided you use Hibernate Search,
be it &lt;a href=&quot;https://quarkus.io/guides/hibernate-search-orm-elasticsearch&quot;&gt;on top of Hibernate ORM&lt;/a&gt;
or &lt;a href=&quot;https://quarkus.io/version/main/guides/hibernate-search-standalone-elasticsearch&quot;&gt;in standalone mode&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The approach suggested in this post is based on the fact that Hibernate Search uses
&lt;a href=&quot;https://docs.jboss.org/hibernate/search/7.0/reference/en-US/html_single/#backend-elasticsearch-indexlayout&quot;&gt;aliased indexes&lt;/a&gt;,
and communicates with the actual index through a read/write alias, depending on the operation it needs to perform.
For example, a search operation will be routed to a read index alias,
while an indexing operation will be sent to a write index alias.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-indexing-rollover/initial-app.png&quot; alt=&quot;initial app&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This approach is implemented and successfully used in our Quarkus application that backs the guides&apos;
search of &lt;a href=&quot;https://quarkus.io/guides/&quot;&gt;quarkus.io/guides/&lt;/a&gt;.
You can see the complete implementation here:
&lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io/blob/d956b6a1341d8693fa1d6b7881f3840f48bdaacd/src/main/java/io/quarkus/search/app/indexing/Rollover.java#L44-L331&quot;&gt;rollover implementation&lt;/a&gt;
and &lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io/blob/d956b6a1341d8693fa1d6b7881f3840f48bdaacd/src/main/java/io/quarkus/search/app/indexing/IndexingService.java#L226-L244&quot;&gt;rollover usage&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Applications using Hibernate Search can keep their search indexes up-to-date by updating the index gradually,
as the data on which the index documents are based is modified, providing a near real-time index synchronisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, if the search requirements allow for a delay in synchronisation
or the data is updated only at certain times of day, the option of mass indexing can effectively keep the indexes up-to-date.
The &lt;a href=&quot;https://docs.jboss.org/hibernate/search/7.0/reference/en-US/html_single/&quot;&gt;Hibernate Search documentation&lt;/a&gt; provides more information about these approaches
and other Hibernate Search capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The application discussed in this post is using the mass indexing approach.
This means that at certain events, e.g., when a new version of the application is deployed or a scheduled time is reached,
the application has to process the documentation guides and create search index documents from them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, since we want our application to keep  providing results to any search requests while we add/update documents to the indexes,
we cannot perform a simple reindexing operation
using a &lt;a href=&quot;https://docs.jboss.org/hibernate/search/7.0/reference/en-US/html_single/#search-batchindex-massindexer&quot;&gt;mass indexer&lt;/a&gt;,
or the recently added &lt;a href=&quot;https://quarkus.io/guides/hibernate-search-orm-elasticsearch#management&quot;&gt;management endpoint in Quarkus&lt;/a&gt;,
as these would drop all existing documents from the index before indexing them:
search operations would not be able to match them anymore until reindexing finishes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, we can create a new index with the same schema and route any write operations to it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-indexing-rollover/write-app.png&quot; alt=&quot;write app&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since Hibernate Search does not provide the rollover feature out of the box (&lt;a href=&quot;https://hibernate.atlassian.net/browse/HSEARCH-3499&quot;&gt;yet&lt;/a&gt;)
we will need to resort to using the lower-level APIs to access the Elasticsearch client and perform the required operations ourselves.
To do so, we need to follow a few simple steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Get the mapping information for the index we want to reindex using the schema manager.&lt;/p&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Inject
SearchMapping searchMapping; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
// ...

searchMapping.scope(MyIndexedEntity.class).schemaManager() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .exportExpectedSchema((backendName, indexName, export) -&amp;gt; { &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
        var createIndexRequestBody = export.extension(ElasticsearchExtension.get())
                .bodyParts().get(0); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
        var mappings = createIndexRequestBody.getAsJsonObject(&quot;mappings&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
        var settings =createIndexRequestBody.getAsJsonObject(&quot;settings&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
    });&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;SearchMapping&lt;/code&gt; somewhere in your app so that we can use it to access a schema manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get a schema manager for the indexed entity we are interested in (&lt;code&gt;MyIndexedEntity&lt;/code&gt;).
If all entities should be targeted, then &lt;code&gt;Object.class&lt;/code&gt; can be used to create the scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the export schema API to access the mapping information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the extension to get access to the Elasticsearch-specific &lt;code&gt;.bodyParts()&lt;/code&gt; method that returns
a JSON representing the JSON HTTP body needed to create the indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the mapping information for the particular index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the settings for the particular index.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the reference to the Elasticsearch client, so we can perform API calls to the search backend cluster:&lt;/p&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Inject
SearchMapping searchMapping; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
// ...
RestClient client = searchMapping.backend() &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    .unwrap(ElasticsearchBackend.class) &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    .client(RestClient.class); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;SearchMapping&lt;/code&gt; somewhere in your app so that we can use it to access a schema manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access the backend from a search mapping instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unwrap the backend to the &lt;code&gt;ElasticsearchBackend&lt;/code&gt;, so that we can access backend-specific APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get a reference to the Elasticsearch&amp;#8217;s rest client.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new index using the OpenSearch/Elasticsearch rollover API
that would allow us to keep using the existing index for read operations,
while write operations will be sent to the new index:&lt;/p&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;@Inject
SearchMapping searchMapping; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
// ...

SearchIndexedEntity&amp;lt;?&amp;gt; entity = searchMapping.indexedEntity(MyIndexedEntity.class);
var index = entity.indexManager().unwrap(ElasticsearchIndexManager.class).descriptor(); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

var request = new Request(&quot;POST&quot;, &quot;/&quot; + index.writeName() + &quot;/_rollover&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
var body = new JsonObject();
body.add(&quot;mappings&quot;, mappings);
body.add(&quot;settings&quot;, settings);
body.add(&quot;aliases&quot;, new JsonObject()); &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
request.setEntity(new StringEntity(gson.toJson(body), ContentType.APPLICATION_JSON));

var response = client.performRequest(request); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
//...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Inject &lt;code&gt;SearchMapping&lt;/code&gt; somewhere in your app so that we can use it to access a schema manager.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the index descriptor to get the aliases from it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start building the rollover request body using the write index alias from the index descriptor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that we are including an empty &quot;aliases&quot; so that the aliases are not copied over to the new index,
except for the write alias (which is implicitly updated since the rollover request is targeting it directly).
We don&amp;#8217;t want the read alias to start pointing to the new index immediately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform the rollover API request using the Elasticsearch REST client obtained in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this successfully completed, indexes are in the state we wanted:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-indexing-rollover/write-app.png&quot; alt=&quot;write app&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can start populating our write index without affecting search requests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we are done with indexing, we can either commit or rollback depending on the results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/search-indexing-rollover/after-indexing.png&quot; alt=&quot;after indexing&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Committing the index rollover means that we are happy with the results and ready to switch to the new index
for both reading and writing operations while removing the old one. To do that, we need to send a request to the cluster:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;var client = ... &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

var request = new Request(&quot;POST&quot;, &quot;_aliases&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
request.setEntity(new StringEntity(&quot;&quot;&quot;
        {
            &quot;actions&quot;: [
                {
                    &quot;add&quot;: {  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        &quot;index&quot;: &quot;%s&quot;,
                        &quot;alias&quot;: &quot;%s&quot;,
                        &quot;is_write_index&quot;: false
                    },
                    &quot;remove_index&quot;: {  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        &quot;index&quot;: &quot;%s&quot;
                    }
                }
            ]
        }
        &quot;&quot;&quot;.formatted( newIndexName, readAliasName, oldIndexName ) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    , ContentType.APPLICATION_JSON));

var response = client.performRequest(request); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
//...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Get access to the Elasticsearch REST client as described above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start creating an &lt;code&gt;_aliases&lt;/code&gt; API request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an action to update the index aliases to use the new index for both read and write operations.
Here, we must make the read alias point to the new index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an action to remove the old index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The names of the new/old index can be retrieved from the response of the initial &lt;code&gt;_rollover&lt;/code&gt; API request,
while the aliases can be retrieved from the index descriptor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Otherwise, if we have encountered an error or decided for any other reason to stop the rollover, we can roll back to using
the initial index:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;var client = ... &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

var request = new Request(&quot;POST&quot;, &quot;_aliases&quot;); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
request.setEntity(new StringEntity(&quot;&quot;&quot;
        {
            &quot;actions&quot;: [
                {
                    &quot;add&quot;: {  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                        &quot;index&quot;: &quot;%s&quot;,
                        &quot;alias&quot;: &quot;%s&quot;,
                        &quot;is_write_index&quot;: true
                    },
                    &quot;remove_index&quot;: {  &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                        &quot;index&quot;: &quot;%s&quot;
                    }
                }
            ]
        }
        &quot;&quot;&quot;.formatted( oldIndexName, writeAliasName, newIndexName ) &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    , ContentType.APPLICATION_JSON));

var response = client.performRequest(request); &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
//...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Get access to the Elasticsearch REST client as described above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start creating an &lt;code&gt;_aliases&lt;/code&gt; API request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an action to update the index aliases to use the old index for both read and write operations.
Here, we must make the write alias point back to the old index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an action to remove the new index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The names of the new/old index can be retrieved from the response of the initial &lt;code&gt;_rollover&lt;/code&gt; API request,
while the aliases can be retrieved from the index descriptor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Keep in mind that in case of a rollback, your initial index may be out of sync if any write operations were performed
while the write alias was pointing to the new index.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this knowledge, we can organize the rollover process as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;try (Rollover rollover = Rollover.start(searchMapping)) {
    // Perform the indexing operations ...
    rollover.commit();
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where the &lt;code&gt;Rollover&lt;/code&gt; class will look as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;exampleblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;class Rollover implements Closeable {
    public static Rollover start(SearchMapping searchMapping) {
        // initiate the rollover process by sending the _rollover request ...
        // ...
        return new Rollover( client, rolloverResponse );  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }

    @Override
    public void close() {
        if ( !done ) { &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
            rollback();
        }
    }

    public void commit() {
        // send the `_aliases` request to switch to the *new* index
        // ...
        done = true;
    }

    public void rollback() {
        // send the `_aliases` request to switch to the *old* index
        // ...
        done = true;
    }
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Keep the reference to the Elasticsearch REST client to perform API calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we haven&amp;#8217;t successfully committed the rollover, it&amp;#8217;ll be rolled back on close.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once again, for a complete working example of this rollover implementation, check out the
&lt;a href=&quot;https://github.com/quarkusio/search.quarkus.io&quot;&gt;search.quarkus.io on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you find this feature useful and would like to have it built-in into your Hibernate Search and Quarkus apps
feel free to reach out to us on the &lt;a href=&quot;https://hibernate.atlassian.net/browse/HSEARCH-3499&quot;&gt;pending feature requests&lt;/a&gt;
to discuss your ideas and suggestions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for more details in the coming weeks as we publish more blog posts
diving into other interesting implementation aspects of this application.
Happy searching and rolling over!&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/search-indexing-rollover/
            </guid>
            
            
            
            <author>Marko Bekhta (https://twitter.com/that_java_guy)</author>
            
        </item>
        
        <item>
            <title>Obtaining heap dump on OutOfMemoryError with Quarkus native</title>
            <link>
                https://quarkus.io/blog/heapdump-oome-native/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with GraalVM for JDK 21,
native executables can run with the &lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError&lt;/code&gt; option to generate a heap dump when a &lt;code&gt;java.lang.OutOfMemoryError&lt;/code&gt; is thrown.
In this blog post we will explore how to use the flag,
we will inspect what a GraalVM Native Image heap dump looks like and how it compares with one produced by HotSpot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: The heap of GraalVM Native Image executables has both read-only and read-write segments.
The read-only part is referred to as the &quot;image heap&quot; and contains the data pre-initialized during the image build to help speed up start-up time.
The read-write part is where allocations at runtime are made.
Therefore, heap dumps generated at runtime will contain content from both the &quot;image heap&quot; and the read-write heap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To see this flag in action, we need to manufacture a situation where a Quarkus application runs out of memory.
One easy way to achieve this is to configure the application with a garbage collector that doesn&amp;#8217;t do any memory reclamation,
i.e. the Epsilon GC.
Once the Quarkus application is running with Epsilon GC,
apply some load and within a short space of time it will run out of memory and produce a heap dump.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s do this using a Quarkus application that simply responds to an HTTP endpoint request as a starting point.
The sample application can be downloaded from
&lt;a href=&quot;https://code.quarkus.io&quot;&gt;code.quarkus.io&lt;/a&gt; using a browser
or via the command line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ wget &quot;https://code.quarkus.io/d?S=io.quarkus.platform%3A3.8&amp;amp;cn=code.quarkus.io&quot; -O code.zip
$ unzip code.zip
$ cd code-with-quarkus&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, build a Quarkus native executable with GraalVM for JDK 21 configuring it to use Epsilon GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ ./mvnw package -DskipTests -Dnative -Dquarkus.native.additional-build-args=--gc=epsilon&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: The GC selection needs to be done at build time for Quarkus native applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the Quarkus native executable is being produced you will be able to observe that GC is indeed configured to be EpsilonGC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;[INFO] --- quarkus-maven-plugin:3.9.3:build (default) @ getting-started-reactive ---
...
[1/8] Initializing...
 Java version: 21.0.2+13, vendor version: GraalVM CE 21.0.2+13.1
 Graal compiler: optimization level: 2, target machine: compatibility
 C compiler: gcc (redhat, x86_64, 13.2.1)
 Garbage collector: Epsilon GC (max heap size: 80% of RAM)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the build completes,
start Quarkus with &lt;code&gt;-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError&lt;/code&gt;.
The latter forces the application to shutdown when an &lt;code&gt;OutOfMemoryError&lt;/code&gt; occurs rather than leave the process in an indeterminate state:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ getting-started-reactive-1.0.0-SNAPSHOT-runner -XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError -Xmx64m
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) getting-started-reactive 1.0.0-SNAPSHOT native (powered by Quarkus 3.9.3) started in 0.030s. Listening on: http://0.0.0.0:8080
2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) Profile prod activated.
2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) Installed features: [cdi, rest, smallrye-context-propagation, vertx]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, apply some load to the HTTP endpoint exposed by the Quarkus application, for example using &lt;code&gt;curl&lt;/code&gt; in a bash loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ while true; do curl http://localhost:8080/hello; done&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switching to the Quarkus console,
an &lt;code&gt;OutOfMemoryError&lt;/code&gt; would be observed along with some messages indicating that a heap dump is being produced:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) getting-started-reactive 1.0.0-SNAPSHOT native (powered by Quarkus 3.9.3) started in 0.030s. Listening on: http://0.0.0.0:8080
2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) Profile prod activated.
2024-04-12 09:58:00,855 INFO  [io.quarkus] (main) Installed features: [cdi, rest, smallrye-context-propagation, vertx]
Dumping heap to svm-heapdump-2213-OOME.hprof ...
Heap dump file created [98454651 bytes in 0.733 secs]
Terminating due to java.lang.OutOfMemoryError: Garbage-collected heap size exceeded.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiple graphical tools exist out there to inspect heap dumps,
such as &lt;a href=&quot;https://visualvm.github.io/&quot;&gt;VisualVM&lt;/a&gt;,
&lt;a href=&quot;https://eclipse.dev/mat/&quot;&gt;Eclipse Memory Analyzer (MAT)&lt;/a&gt;, etc.,
but some new ones are also available that you can run in the command line to get a quick picture of the heap dump,
for example
&lt;a href=&quot;https://github.com/openjdk/jol&quot;&gt;Java Object Layout (JOL)&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ java -Xmx256m -DprintFirst=6 -jar jol-cli.jar heapdump-stats svm-heapdump-2213-OOME.hprof
Heap Dump: svm-heapdump-2213-OOME.hprof
Read progress: DONE

Hotspot Layout Simulation (JDK 21, Current VM: 12-byte object headers, 4-byte references, 8-byte aligned objects, 8-byte aligned array bases)

=== Class Histogram

Table is sorted by &quot;INSTANCES&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
         132,330              24       3,175,920    java.lang.String
          50,277              40       2,011,080    io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry
          44,852              40       1,794,080    com.oracle.svm.core.monitor.JavaMonitor
          38,755              32       1,240,160    java.util.HashMap$Node
          33,776              24         810,624    byte[5]
          31,728              48       1,522,944    java.util.HashMap
             ...             ...             ...    ...
         899,336       9,438,056      48,193,360    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
       1,231,054       9,438,264      58,748,168    &amp;lt;total&amp;gt;

=== Class Histogram

Table is sorted by &quot;SIZE&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
               1       3,480,544       3,480,544    byte[3480528]
               1       3,236,728       3,236,728    byte[3236705]
               1         642,648         642,648    byte[642626]
               1         289,824         289,824    byte[289808]
               1         173,664         173,664    byte[173645]
               1         157,728         157,728    byte[157710]
             ...             ...             ...    ...
       1,231,048       1,457,128      50,767,032    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
       1,231,054       9,438,264      58,748,168    &amp;lt;total&amp;gt;

=== Class Histogram

Table is sorted by &quot;SUM SIZE&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
               1       3,480,544       3,480,544    byte[3480528]
               1       3,236,728       3,236,728    byte[3236705]
         132,330              24       3,175,920    java.lang.String
          50,277              40       2,011,080    io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry
          10,054             184       1,849,936    io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext
          44,852              40       1,794,080    com.oracle.svm.core.monitor.JavaMonitor
             ...             ...             ...    ...
         993,539       2,720,704      43,199,880    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
       1,231,054       9,438,264      58,748,168    &amp;lt;total&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The presence of SubstrateVM,
the VM that powers native images built with GraalVM,
can be clearly observed because of the instances of &lt;code&gt;com.oracle.svm.core.monitor.JavaMonitor&lt;/code&gt; present in the heap dump.
What would the heap dump look like if we repeat exactly the same exercise but instead we use Quarkus JVM mode? Let’s see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rebuild the Quarkus app for JVM mode and run it with Epsilon GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;$ mvnw package -DskipTests
$ java -XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -Xmx64m -jar quarkus-run.jar
__  ____  __  _____   ___  __ ____  ______
 --/ __ \/ / / / _ | / _ \/ //_/ / / / __/
 -/ /_/ / /_/ / __ |/ , _/ ,&amp;lt; / /_/ /\ \
--\___\_\____/_/ |_/_/|_/_/|_|\____/___/
2024-04-12 10:02:37,945 INFO  [io.quarkus] (main) getting-started-reactive 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.9.3) started in 1.692s. Listening on: http://0.0.0.0:8080
2024-04-12 10:02:37,961 INFO  [io.quarkus] (main) Profile prod activated.
2024-04-12 10:02:37,962 INFO  [io.quarkus] (main) Installed features: [cdi, rest, smallrye-context-propagation, vertx]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After applying the same load, you would observe the heap dump being generated in JVM mode as well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;2024-04-12 10:02:37,945 INFO  [io.quarkus] (main) getting-started-reactive 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.9.3) started in 1.692s. Listening on: http://0.0.0.0:8080
2024-04-12 10:02:37,961 INFO  [io.quarkus] (main) Profile prod activated.
2024-04-12 10:02:37,962 INFO  [io.quarkus] (main) Installed features: [cdi, rest, smallrye-context-propagation, vertx]
java.lang.OutOfMemoryError: Java heap space
Dumping heap to java_pid2841.hprof ...
Heap dump file created [97383542 bytes in 1.232 secs]
Terminating due to java.lang.OutOfMemoryError: Java heap space&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this is what the heap dump looks like with JOL:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;java -Xmx256m -DprintFirst=6 -jar jol-cli.jar heapdump-stats java_pid2841.hprof
Heap Dump: java_pid2841.hprof
Read progress: DONE

Hotspot Layout Simulation (JDK 21, Current VM: 12-byte object headers, 4-byte references, 8-byte aligned objects, 8-byte aligned array bases)

=== Class Histogram

Table is sorted by &quot;INSTANCES&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
          91,335              24       2,192,040    java.lang.String
          35,946              40       1,437,840    io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry
          34,942              32       1,118,144    java.util.HashMap$Node
          22,998              24         551,952    byte[5]
          22,789              48       1,093,872    java.util.HashMap
          22,381              32         716,192    java.util.concurrent.ConcurrentHashMap$Node
             ...             ...             ...    ...
         716,986      19,427,976      59,367,272    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
         947,377      19,428,176      66,477,312    &amp;lt;total&amp;gt;

=== Class Histogram

Table is sorted by &quot;SIZE&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
               1         972,120         972,120    int[243026]
               1         416,136         416,136    int[104030]
               1         282,056         282,056    int[70510]
               1         237,608         237,608    byte[237587]
               1         131,920         131,920    int[32976]
               1         129,672         129,672    int[32414]
             ...             ...             ...    ...
         947,371      17,258,664      64,307,800    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
         947,377      19,428,176      66,477,312    &amp;lt;total&amp;gt;

=== Class Histogram

Table is sorted by &quot;SUM SIZE&quot;.
Printing first 6 lines. Use -DprintFirst=# to override.

       INSTANCES            SIZE        SUM SIZE    CLASS
------------------------------------------------------------------------------------------------
          91,335              24       2,192,040    java.lang.String
           7,189             232       1,667,848    io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext
          35,946              40       1,437,840    io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry
          15,528              80       1,242,240    java.util.HashMap$Node[16]
          14,380              80       1,150,400    io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[16]
          34,942              32       1,118,144    java.util.HashMap$Node
             ...             ...             ...    ...
         748,057      19,427,688      57,668,800    &amp;lt;other&amp;gt;
------------------------------------------------------------------------------------------------
         947,377      19,428,176      66,477,312    &amp;lt;total&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As expected, no SubstrateVM classes are present in this heap dump,
leaving only Quarkus, Vert.x and OpenJDK types in the heap dump.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/heapdump-oome-native/
            </guid>
            
            
            
            <author>Galder Zamarreño (https://twitter.com/galderz)</author>
            
        </item>
        
        <item>
            <title>Ship.Cars leverages Quarkus to reach its goals</title>
            <link>
                https://quarkus.io/blog/ship-cars-leverages-quarkus-to-reach-its-goals/
            </link>
            <description>
                &lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/sc_logo.png&quot; alt=&quot;Ship.Cars logo&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ship.cars/&quot;&gt;Ship.Cars&lt;/a&gt; is a revolutionary partner in auto transport logistics, offering customizable software solutions specially tailored to accommodate all your car hauling requirements.
Our tools are impeccably designed to amplify your business&amp;#8217;s ability to streamline, automate, and organize the entire car hauling process, from start to finish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Through the development of various products, Ship.Cars has helped the automotive logistics industry to transition into the modern age.
Our industry solutions, such as LoadMate and LoadMate Pro, cater to the various needs of dealerships, rental car companies, and other shippers.
Meanwhile, innovations like our SmartHaul TMS and SmartHaul APP have become indispensable tools for our car haulers to book and manage their loads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;contending-with-challenges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#contending-with-challenges&quot;&gt;&lt;/a&gt;Contending with challenges&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a product-centric organization, we utilize the microservice paradigm to deliver a diverse array of functionality via numerous distinct software products.
Thus far, we&amp;#8217;ve developed over &lt;strong&gt;50&lt;/strong&gt; microservices.
Each of these not only meets the requisite functional requirements but also adheres to rigorous technical specifications.
These specifications ensure seamless provisioning of services, consistent performance under load, and easy identification and resolution of any arising issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The construction of these services, over a large period of time, has relied on various frameworks, including &lt;em&gt;Quarkus&lt;/em&gt; , &lt;em&gt;Spring Boot&lt;/em&gt; and &lt;em&gt;Django&lt;/em&gt;.
Each framework exhibits its unique strengths and weaknesses extending from nuanced characteristics.
However, with time, we&amp;#8217;ve determined that Quarkus optimally fulfills a large portion of our requirements.
This explains our current shift from Django to Quarkus for a significant portion of our development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As Ship.Cars deploys its microservices on Kubernetes within the Google Cloud platform, we continually seek efficient ways to scale our developmental prowess, while simultaneously saving cloud resource consumption.
With cloud resource consumption costs always being a priority, we strive to find effective ways to optimize memory and processor use in the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Common challenges often arise when deploying microservices in the cloud, including:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower cloud resource consumption&lt;/strong&gt;: Multiple active microservices can consume a significant amount of memory and CPU, escalating costs rapidly.
Hence, effective management of cloud resources is crucial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster boot-up times&lt;/strong&gt;: In a microservices architecture, it&amp;#8217;s important for services to stop, start, and scale swiftly.
Slow boot-up times can have a severe impact on system performance and responsiveness.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streamlined microservices development&lt;/strong&gt;: Building and ensuring interoperability within microservices can be complex, requiring deft management and specialized tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilience and fault tolerance&lt;/strong&gt;: Microservices must be resilient and capable of quick recovery from unexpected failures.
Implementing such fault tolerance mechanisms, however, can be challenging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service discovery&lt;/strong&gt;: The ability to discover and communicate between services becomes critical as their number increases.
Traditional hard-coded endpoints do not scale well in these scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Event-driven microservices&lt;/strong&gt;: Implementing an event-driven architectural model in microservices enables distinct services to communicate asynchronously.
Yet, orchestrating this can be difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reactive and imperative programming&lt;/strong&gt;: The selection of an appropriate programming model for the cloud, especially one that supports scalability and system responsiveness, can be daunting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus could beautifully address these challenges as follows:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower cloud resource consumption&lt;/strong&gt;: Known for their high memory usage, traditional Java applications can get expensive in a cloud environment where resources cost money.
Quarkus significantly reduces the memory footprint of applications, leading to more efficient cloud resource management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster boot-up times&lt;/strong&gt;: Slow startup times are quite common with traditional Java applications, an issue that presents a particular problem in the cloud where applications need to scale up and down quickly.
Quarkus drastically improves start-up performances, with applications often starting in sub-second times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streamlined microservices development&lt;/strong&gt;: Quarkus has been designed to work with popular Java standards and technologies such as &lt;code&gt;Eclipse MicroProfile&lt;/code&gt;, &lt;code&gt;Jakarta EE&lt;/code&gt;, &lt;code&gt;OpenTelemetry&lt;/code&gt;, &lt;code&gt;Hibernate&lt;/code&gt;, etc., simplifying the development process and reducing the time and complexity involved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resilience and fault tolerance&lt;/strong&gt;: Quarkus employs the &lt;code&gt;MicroProfile Fault Tolerance&lt;/code&gt; specification to provide features like timeout, retry, bulkhead, circuit breaker, and fallback.
These features render your microservices more resilient and fault-tolerant.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service discovery&lt;/strong&gt;: Quarkus supports Kubernetes service discovery natively, allowing services to discover and communicate with each other in a reliable manner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Event-driven microservices&lt;/strong&gt;: Quarkus supports event-driven architecture, enabling services to communicate through events, thereby reducing the complexity and coupling between the services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reactive and imperative programming&lt;/strong&gt;: Quarkus gives developers the freedom to use reactive or imperative programming models or even combine both in the same application, creating a perfect solution for scalability and system responsiveness.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tackling-cloud-resource-consumption&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tackling-cloud-resource-consumption&quot;&gt;&lt;/a&gt;Tackling cloud resource consumption&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For businesses like ours, one of our organizational goals is to reduce costs while not sacrificing platform’s performance to ensure premium user experience.
However, traditional &lt;strong&gt;JVM-based&lt;/strong&gt; services often present challenges like substantial memory footprints, extended startup times, and high CPU usage.
These problems not only impact technical aspects but also have financial implications, significantly affecting the overall cost of running and maintaining software solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native images are standalone executables that include both the application code and the necessary runtime components.
With the advent of GraalVM, a high-performance, polyglot virtual machine able to run applications written in different programming languages, the concept of native images has gained popularity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Native images offer several advantages, such as:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster startup time&lt;/strong&gt;: As pre-compiled entities, native images can start incredibly quickly, often in milliseconds.
This aspect is hugely beneficial when applications need to start and stop almost instantly, like in serverless functions or cloud-based microservices architectures.
For instance, one of our microservices, &lt;code&gt;native powered by Quarkus 3.2.7.Final&lt;/code&gt;, starts in just 0.677s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lower memory footprint&lt;/strong&gt;: Applications&apos; memory footprints can be significantly reduced with native images as they only include the runtime components actually used by the applications.
This efficiency is important in cloud environments where resource usage directly affects costs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Real service memory usage&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/memory.png&quot; alt=&quot;Memory usage&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Memory usage of a Quarkus native image&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easier distribution: As standalone executables, native images can be easily distributed and run on any environment without requiring the installation of a separate runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduced container size: Being fully self-contained, the container images for native images are more efficient to distribute due to their reduced size.
This leads to faster start-up times in containerized environments like Kubernetes.
For example, the size comparison between &lt;code&gt;Quarkus Native (85.1 MB)&lt;/code&gt;, &lt;code&gt;Quarkus Non-Native (648.4 MB)&lt;/code&gt; and &lt;code&gt;Spring Boot (861.9 MB)&lt;/code&gt; provides a clear picture of the difference in resource efficiency between them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Quarkus, you can compile your application into a native image by leveraging the GraalVM native-image compiler, allowing your Java applications to experience these advantages in cloud platforms, containerization, and serverless architectures due to their swift startup times and lower resource consumption.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;optimizing-developer-productivity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#optimizing-developer-productivity&quot;&gt;&lt;/a&gt;Optimizing developer productivity&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Quarkus brings several benefits which enhance developer productivity, such as:&lt;/div&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Live Coding&lt;/strong&gt;: With no build time and deploy time, developers can test changes to the code instantaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zero configuration with Dev Services&lt;/strong&gt;: Quarkus can automatically configure some services for development and testing purposes, enhancing efficiency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continuous testing&lt;/strong&gt;: Continuous testing is implemented via the command line and the Dev UI, enhancing the quality of the end product without depending on third-party tools and processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dev UI&lt;/strong&gt;: Developers can configure extensions, monitor the application, and test components with great ease.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unified config&lt;/strong&gt;: All of the application&amp;#8217;s configurations are consolidated in one place, improving accessibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standards-based&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;embracing-quarkus-extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#embracing-quarkus-extensions&quot;&gt;&lt;/a&gt;Embracing Quarkus extensions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus Extensions are pre-configured feature sets designed to simplify several common tasks during application development.
They offer an efficient way to imbibe new capabilities or direct integrations in your project with minimum effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our organization, we managed to implement our internal extensions swiftly, effectively addressing maintenance issues and configuration incompatibilities we encountered earlier while trying to create native images.
Today, we benefit from an extension hub that quells all previous concerns and enhances our productivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Quarkus extensions are powerful tools offering deep integration, optimization, and enhanced developer experience, it&amp;#8217;s essential to weigh the trade-offs and consider if simpler solutions like standard JAR libraries might suit the need better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;looking-ahead&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#looking-ahead&quot;&gt;&lt;/a&gt;Looking ahead&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the graphical representation below, I want to illustrate the inherent relationship between the process of adopting Quarkus and the subsequent outcomes over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/shipcars/difficulty_cost_line.png&quot; alt=&quot;Difficulty Cost Line&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Comparison of Difficulty/Cost and Ease of Ease-of-Use/Returns Over Time in Adopting Quarkus Features&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the &lt;em&gt;&quot;Y-Axis&quot;&lt;/em&gt;, we define difficulty or cost in terms of story-points per sprint, reflecting the relative effort required for the features&apos; implementation.
This also represents costs in terms of time and resources spent in the adoption of Quarkus features. Simultaneously, ease-of-use/returns take into account metrics such as decreased debugging time,
faster feature development, and improvements in team productivity post successful implementation.
The graph clearly demonstrates that at the outset (tagged as &lt;em&gt;&quot;Begin&quot;&lt;/em&gt; on the &lt;em&gt;&quot;X-Axis&quot;&lt;/em&gt;), both the difficulty (illustrated in higher story points) and costs are at their peak, signifying a challenging initial phase.
However, as we move along the timeline from &lt;em&gt;&quot;Begin&quot;&lt;/em&gt; through &lt;em&gt;&quot;Middle&quot;&lt;/em&gt; and onto &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, we see a notable drop in story-points per sprint, indicating a reduced difficulty level and cost.
In parallel to this, the ease-of-use and returns charted start at a comparatively low point at the beginning.
These escalate gradually as we advance along the timeline towards &lt;em&gt;&quot;Middle&quot;&lt;/em&gt; and &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, showing a tangible increase in productivity and other gains from adopting and integrating Quarkus features into our practices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By the time we reach &lt;em&gt;&quot;Future&quot;&lt;/em&gt;, we see a substantial decrease in difficulty and cost, while the ease-of-use and returns have considerably increased.
This dual progression effectively highlights the significant benefits of investing in the adoption of Quarkus, despite the initial challenges.
Investing in Quarkus is a strategic maneuver towards creating efficient, scalable, and modern applications aptly suited for the cloud era.
With its robust capabilities and supportive community, Quarkus is well-positioned to pioneer the future of cloud-native application development.
The decision to adopt Quarkus is a significant leap towards optimizing for efficiency, scalability, and cutting-edge application performance that will provide us with a considerable competitive edge in the rapidly evolving tech landscape.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/ship-cars-leverages-quarkus-to-reach-its-goals/
            </guid>
            
            
            
            <author>Ivelin Yanev (https://twitter.com/iqnev)</author>
            
        </item>
        
        <item>
            <title>Revolutionizing time tracking: how Quarkus transformed our backend development</title>
            <link>
                https://quarkus.io/blog/quarkus-saas-backend-time-tracking-app-case-study/
            </link>
            <description>
                &lt;div class=&quot;imageblock customer-logo&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/gran-logo.png&quot; alt=&quot;GRAN logo&quot; width=&quot;200&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph customer-quote&quot;&gt;
&lt;p&gt;GRAN Software Solutions is a German company that designs and builds modern backend solutions.
We work with large automotive clients and others to restructure and create new solutions.
We also develop and offer SaaS tools to help us and others in our daily work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One such tool we built for ourselves and others is a time tracking application called &lt;a href=&quot;https://sheetty.com&quot;&gt;Sheetty&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-time-tracking-challenge&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-time-tracking-challenge&quot;&gt;&lt;/a&gt;The time tracking challenge&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/frustrated-developer.png&quot; alt=&quot;Frustrated Developer&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We needed to create a time tracking application because the existing solutions on the market did not meet our specific requirements.
They were either not designed for developers, lacked the simplicity we needed, or were loaded with unnecessary features.
We wanted to build a tool that was perfectly tailored to our needs, using the extensive experience we had gained from working on client projects over the years.
We also wanted to create a more modern and user-friendly design, which would be fun to use and incorporate newer technologies such as Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main issue we faced with existing time tracking solutions was the lack of an easy way to switch between clients.
We also found that they did not support quick actions or shortcuts, which we were used to, and there was no visual way to see the time entries we made during the day.
Additionally, we wanted to track time within the context of contracts signed with our clients in terms of daily rates and contract caps.
That&amp;#8217;s why we decided to create a custom solution to address all of these specific needs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;discovering-quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#discovering-quarkus&quot;&gt;&lt;/a&gt;Discovering Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we were choosing the technology stack to use for our backend, our main goal was to use technologies that we were already familiar with, such as the Kotlin programming language, Spring Boot framework, and Postgres database.
We also wanted to select an ecosystem that could provide us with libraries for database connectivity, web client, caching, and other similar features.
Additionally, we wanted to use a high-performance solution to keep our hosting costs low and avoid high memory requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After analyzing various solutions on the market, we decided to use the Quarkus framework as it met all of our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-backend-development-experience-with-quarkus-the-key-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#our-backend-development-experience-with-quarkus-the-key-features&quot;&gt;&lt;/a&gt;Our backend development experience with Quarkus: the key features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have designed our application architecture to separate the frontend and backend parts.
To secure our backend APIs in a modern and secure way, we opted to use JSON web tokens, and Quarkus has excellent support for them.
We also use role-based security for our APIs, and Quarkus makes it easy for us to implement this.
We have different roles in our application, such as regular users and admins, and this information is encoded in our JSON web tokens.
Quarkus ensures that these tokens are not tampered with or manipulated when they reach our back-end systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;@RolesAllowed&lt;/code&gt; for authorization of our API endpoints&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;@Path(&quot;/clients&quot;)
@RolesAllowed(&quot;User&quot;)
@Produces(MediaType.APPLICATION_JSON)
@ApplicationScoped
class ClientResource(
    private val getClientsHandler: GetClientsHandler,
    private val newClientHandler: NewClientHandler,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We relied heavily on rich JSON support to model our data flexibly and delegate much of the functionality to Postgres itself to manipulate the data.
This way, we could pass the already-built JSON objects back to the API client, which significantly reduced the time it took to make design decisions in the application code.
Quarkus provided fantastic support for JSON object APIs.
We believe that Postgres is the right place to perform data manipulations and aggregations, not the application code, due to performance and code maintenance reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using &lt;code&gt;JsonObject&lt;/code&gt; to pass our data in and out&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-kotlin hljs&quot; data-lang=&quot;kotlin&quot;&gt;@GET
@Produces(MediaType.APPLICATION_JSON)
suspend fun getProfile() = db.preparedQuery(
    &quot;&quot;&quot;select profile from &quot;user&quot; where email = $1&quot;&quot;&quot;.trimIndent()
).execute().awaitSuspending().first().getJsonObject(&quot;profile&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although Quarkus primarily targets Java programming language, Kotlin support is also quite good.
We used coroutines and suspending functions, which allowed for greater performance and much simpler code compared to some other asynchronous programming models that are available.
Kotlin&amp;#8217;s structured concurrency enabled us to write seemingly sequential code but in reality, very performant asynchronous code.
Quarkus provides excellent Kotlin extension methods built on top of existing asynchronous APIs such as Mutiny.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We executed the database migration on application startup, which was very important for us.
Fortunately, Quarkus has excellent Flyway support, so all our database migrations were in one place and executed during our backend booting process.
This kept our database schema and data transparent and reproducible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/db-migrations.png&quot; alt=&quot;Database Migrations&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Using Flyway to execute database migrations&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our deployments, we use Kubernetes.
Before using Quarkus, we described our application requirements using helm packaging, but with Quarkus, we opted for another approach as Quarkus offers a great Kubernetes extension.
Instead of writing any code, we described our Kubernetes resources using an &lt;code&gt;application.yaml&lt;/code&gt; file, keeping our complete application configuration in one place.
This extension generated Kubernetes resource files behind the scenes, which we then applied to our Kubernetes cluster.
This works well for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/k8s-config.png&quot; alt=&quot;Kubernetes configuration&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Using the Kubernetes extension to generate Kubernetes resources&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For packaging our backend API, we used the Jib extension.
To package our application in a container, all we had to do was use the &lt;code&gt;application.yaml&lt;/code&gt; file and set all the required parameters such as image name tags repository, and so on.
We didn&amp;#8217;t have to maintain the Docker file on our own, which was very convenient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our time tracking application needs to send emails to our users and admins on various occasions.
To keep things simpler, we decided not to go for any third-party API-driven email-sending approach.
Instead, we send emails ourselves, and for that purpose, we use Qute email templates, which make composing and sending emails to our users very simple.
This extension provides support for coding coroutines, allowing for non-blocking sending and higher throughput.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/posts/quarkus-user-stories/gran/qute-templates.png&quot; alt=&quot;Qute Templates&quot; width=&quot;640&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. Using Qute email templates to send emails&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;development-journey&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#development-journey&quot;&gt;&lt;/a&gt;Development journey&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Quarkus development process has been excellent so far.
Compared to other frameworks like Spring Boot, Quarkus has a faster startup time and a smaller memory footprint.
It also provides profiles, which allows us to have slightly different configurations or behaviors between environments.
We can easily substitute some hard-to-run third-party services with local mocks, leaving the application code unchanged.
Quarkus is also great in terms of configuration and how easily we can overwrite values stored in the &lt;code&gt;application.yaml&lt;/code&gt; file with external environment variables.
Although the hot reload mode didn&amp;#8217;t work well with Kotlin, I believe all the bugs related to it will be solved in upcoming releases.
During development, we had to restart our running service most of the time for code changes to take effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our backend API functionalities took approximately a month and a half to complete.
Considering that only two developers worked on the backend, I think it was a good result.
In this phase of our product lifecycle, we decided against writing automated tests due to constantly revisiting requirements and our needs.
Instead, we went for manual testing for now.
Once our time tracking application gets more active users, we plan to start writing automated tests using Quarkus test support, including Testcontainers and others.
Developing a full-blown API, including API security with JSON web tokens and authorization in place, having database migration automatically applied during application boot time, having a flexible and maintainable code base revolving around JSON, with the ability to package and deploy our API to our Kubernetes cluster, is quite an achievement for just a month and a half of work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are glad to share that using Quarkus, Kotlin, and Postgres as the foundation of our backend API has been a fun and productive experience for us.
Quarkus&amp;#8217;s ability to experiment quickly and leverage ready-made components has made us confident that we made the right technological choice.
Although there are some imperfections with hot reload and some quirks with Kotlin, we are waiting for the fixes to be made and have no doubt that Quarkus is the best solution for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are working smart and hard to bring new features to our time tracking application.
To achieve this, we will continue to use the great features provided by Quarkus, which dramatically reduce the time needed to roll out our features quickly.
We invite you to try our time tracker at &lt;a href=&quot;https://sheetty.com&quot;&gt;sheetty.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-saas-backend-time-tracking-app-case-study/
            </guid>
            
            
            
            <author>Dusan Odalovic (https://twitter.com/OdalovicDusan)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.9.4 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-9-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.9.4, our third (we skipped 3.9.0) maintenance release for the 3.9 release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.9, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt;, and &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.9&quot;&gt;3.9&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.9.4&quot;&gt;the full changelog of 3.9.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-9-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.8.4 released - Maintenance release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-8-4-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we released Quarkus 3.8.4, our third (we skipped 3.8.0) maintenance release for our 3.8 LTS release train.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release contains bugfixes and documentation improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update&quot;&gt;&lt;/a&gt;Update&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To update to Quarkus 3.8, we recommend updating to the latest version of the Quarkus CLI and run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash hljs&quot; data-lang=&quot;bash&quot;&gt;quarkus update --stream=3.8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;quarkus update&lt;/code&gt; can update your applications from any version of Quarkus (including 2.x) to Quarkus 3.8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using 3.x, please refer to the &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-0-final-released/&quot;&gt;3.0 announcement&lt;/a&gt; for all the details.
You can also refer to &lt;a href=&quot;https://quarkus.io/blog/quarkus-3-upgrade/&quot;&gt;this blog post&lt;/a&gt; for additional details.
Once you upgraded to 3.0, also have a look at the &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.1&quot;&gt;3.1&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;3.2&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3&quot;&gt;3.3&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.4&quot;&gt;3.4&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.5&quot;&gt;3.5&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.6&quot;&gt;3.6&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.7&quot;&gt;3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.8&quot;&gt;3.8&lt;/a&gt; migration guides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.8.4&quot;&gt;the full changelog of 3.8.4 on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-8-4-released/
            </guid>
            
            
            
            <author>Guillaume Smet (https://twitter.com/gsmet_)</author>
            
        </item>
        
        <item>
            <title>Quarkus 3.2.12.Final released - Maintenance LTS release</title>
            <link>
                https://quarkus.io/blog/quarkus-3-2-12-final-released/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus 3.2.12.Final, the eleventh maintenance release of the 3.2 LTS release train has been released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release includes the following security-related fixes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-2700&quot;&gt;CVE-2024-2700&lt;/a&gt; io.quarkus/quarkus-core: Leak of local configuration properties into Quarkus applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2024-29025&quot;&gt;CVE-2024-29025&lt;/a&gt; io.netty/netty-codec-http: Allocation of Resources Without Limits or Throttling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/b_c/jose4j/issues/212&quot;&gt;CVE-2023-51775&lt;/a&gt; org.bitbucket.b_c/jose4j: Dos Attack Via specifically crafted JWE&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the following component upgrades:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apache Mime4J 0.8.9 &amp;#8594; 0.8.11&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jose4J 0.9.3 &amp;#8594; 0.9.6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netty 4.1.100.Final &amp;#8594; 4.1.108.Final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netty tcnative 2.0.61.Final &amp;#8594; 2.0.65.Final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vert.x 4.4.8 &amp;#8594; 4.4.9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;com.dajudge.kindcontainer:kindcontainer 1.3.0 &amp;#8594; 1.4.5&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are not already using a 3.2 release, please refer to &lt;a href=&quot;https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.2&quot;&gt;our migration guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;known-issues-include&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#known-issues-include&quot;&gt;&lt;/a&gt;Known issues include:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It should be a safe upgrade for anyone already using a 3.2.11.Final release. However, the fix for CVE-2024-2700 introduces a change in how configuration options are recoded at build time and should be taken into account.
More specifically, properties from configuration sources that are considered local (those that are available at build time but not runtime, such as environment variables, system properties, Maven and Gradle project properties) will not override the default values of runtime configuration properties. This is done to avoid leaking local environment values into production builds.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;full-changelog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#full-changelog&quot;&gt;&lt;/a&gt;Full changelog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can get &lt;a href=&quot;https://github.com/quarkusio/quarkus/releases/tag/3.2.12.Final&quot;&gt;the full changelog of 3.2.12.Final on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;come-join-us&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#come-join-us&quot;&gt;&lt;/a&gt;Come Join Us&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We value your feedback a lot so please report bugs, ask for improvements&amp;#8230;&amp;#8203; Let&amp;#8217;s build something great together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are a Quarkus user or just curious, don&amp;#8217;t be shy and join our welcoming community:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;provide feedback on &lt;a href=&quot;https://github.com/quarkusio/quarkus/issues&quot;&gt;GitHub&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;craft some code and &lt;a href=&quot;https://github.com/quarkusio/quarkus/pulls&quot;&gt;push a PR&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discuss with us on &lt;a href=&quot;https://quarkusio.zulipchat.com/&quot;&gt;Zulip&lt;/a&gt; and on the &lt;a href=&quot;https://groups.google.com/d/forum/quarkus-dev&quot;&gt;mailing list&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ask your questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/quarkus&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
            </description>
            <pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-3-2-12-final-released/
            </guid>
            
            
            
            <author>Alexey Loubyansky (https://twitter.com/aloubyansky)</author>
            
        </item>
        
        <item>
            <title>Quarkus Newsletter #43 - April</title>
            <link>
                https://quarkus.io/blog/quarkus-newsletter-43/
            </link>
            <description>
                &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out these great articles in the April newsletter. &quot;The Power of LLMs in Java: Leveraging Quarkus and LangChain4j&quot; by Nicolas Duminil attempts to demystify the use of LLMs in Java, with Quarkus and LangChain4j, across a ludic and hopefully original project. Learn about some challenges running several simultaneous Quarkus app containers on your machine with the Quarkus’ remote development mode activated presents in &quot;Multiplying The Developer Joy: Multiple Quarkus Containers + Simultaneous Remote Development Sessions&quot; by Rustam Mehmandarov. See how to configure Quarkus OIDC with Google Cloud credentials in &quot;OIDC with Google &amp;amp; Quarkus&quot; by Prabodh Agarwal. &quot;An Open Plea to the Quarkus Team&quot; by Preslav Rachev asks us to rethink the way the Java community sees Quarkus the framework. &quot;Getting started with MongoDB and Quarkus: Beyond the basics&quot; by Hans-Peter Grahsl is Part 2 of is article on how to Connect your Quarkus application to a fully-managed MongoDB database instance. Learn how to lower the level of a logger in Quarkus to better understand when something goes wrong and how to fix it with Gwenneg Lepage&amp;#8217;s &quot;Changing the Quarkus loggers level from Unleash&quot; article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also see the latest Quarkus Insights episodes, top tweets and upcoming Quarkus attended events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://quarkus.io/newsletter/43/&quot;&gt;Newsletter #43: April&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Want to get newsletters in your inbox? &lt;a href=&quot;https://quarkus.io/newsletter&quot;&gt;Sign up for the newsletter&lt;/a&gt; using the on page form.&lt;/p&gt;
&lt;/div&gt;
            </description>
            <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
            <guid>
                https://quarkus.io/blog/quarkus-newsletter-43/
            </guid>
            
            
            
            <author>James Cobb (https://twitter.com/insectengine)</author>
            
        </item>
        
    </channel>
</rss>
